<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LOST]]></title>
  <link href="http://delta4d.github.com/atom.xml" rel="self"/>
  <link href="http://delta4d.github.com/"/>
  <updated>2013-02-03T17:48:05+08:00</updated>
  <id>http://delta4d.github.com/</id>
  <author>
    <name><![CDATA[delta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[goagent on linux]]></title>
    <link href="http://delta4d.github.com/blog/2013/02/03/goagent-on-linux/"/>
    <updated>2013-02-03T17:11:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/02/03/goagent-on-linux</id>
    <content type="html"><![CDATA[<p>不知从什么时候开始，每次装机后翻墙变为第一件要做的事。<a href="https://code.google.com/p/goagent/">goagent</a>已经进入了2.x时代，配置也方便了不少，其实跟着wiki走一遍就好了。</p>

<h2 id="install">Install</h2>
<ol>
  <li>在<a href="https://developers.google.com/appengine/">GAE</a>建立自己的工程，记住工程的名字</li>
  <li>将local/proxy.ini中的appid改为你自己的刚刚建立的工程名</li>
  <li>进入server目录执行<code>uploaddir=python python uploader.zip</code>将文件上传到服务器</li>
  <li>进入local执行<code>python2 proxy.py</code></li>
  <li>安装插件SwitchySharp，可以在chromewebstore找到</li>
</ol>

<h2 id="issues">Issues</h2>
<ol>
  <li>
    <p>gevent or pyopenssl disabled</p>

    <pre><code>sudo emerge -va gevent
sudo emerge -va pyopenssl
</code></pre>

    <p>add keywords changes according to output msg</p>
  </li>
  <li>
    <p>twitter | youtube 无法登录
打开chrome导入local目录下的CA.crt即可</p>
  </li>
</ol>

<h2 id="start-at-boot">Start at Boot</h2>
<p>local目录下有自启动脚本，适用于win，gentoo下可以这么做</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1">#!/usr/bin/env sh</span>
</span><span class="line"><span class="c1">#/etc/local.d/goagent.start</span>
</span><span class="line">
</span><span class="line"><span class="nx">nohup</span> <span class="nx">python2</span> <span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">py</span> <span class="o">&amp;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reference">Reference</h2>
<p><a href="http://en.gentoo-wiki.com/wiki/Run_a_command_on_boot">Gentoo run a command on boot</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gentoo notes 01]]></title>
    <link href="http://delta4d.github.com/blog/2013/01/27/gentoo-notes-01/"/>
    <updated>2013-01-27T19:26:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/01/27/gentoo-notes-01</id>
    <content type="html"><![CDATA[<h2 id="why-gentoo">Why Gentoo</h2>
<p>久仰Gentoo大名，过去一年断断续续在虚拟机上装过好几次Gentoo了，一直想在实体机上试试，于是趁放假的时候折腾折腾。</p>

<h2 id="start">Start</h2>

<p>Gentoo是编译安装的，于是可以进行相关编译选项优化。同时Gentoo是可以滚动升级的，这样方便不少。开始装机的时候还是想着自己编译内核的，结果开机后不断panic，把我也搞的panic了，于是老老实实用genkernel，以后有机会在好好编译内核吧，先把系统起来在说。很多用户觉得Gentoo编译太费时间了，所以不选择Gentoo，但装机大多都是可以一劳永逸的，配置好后并不会频繁的装软件了。装好基本系统其实还是比较快的，使用genkernel也只用了一个小时左右，装好X然后装DE便会比较慢了，键盘控，喜欢轻量级的话装个WM是便会很快了。</p>

<h2 id="errors">Errors</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">!!The filesystem mounted at /dev/sdb3 does not appear to be a valid /. Try again 
</span><span class="line">!!Could not find the root block device in. 
</span><span class="line">Please specify another value or: press Enter for the same , type "shell" ......</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可能是grub.conf写错了，需要注意一下两个变量：</p>

<ul>
  <li><code>root (hd0,0)</code>指/boot在/dev/sda1。(hd0,0-3)表示四个主分区，(hd0,&gt;3)表示逻辑分区，其中grub从0开始，而linux从1开始表示分区。</li>
  <li><code>real_root=/dev/sdax</code>指/在/dev/sdax</li>
</ul>

<p>startx的时候出现no screens found
   可能是显卡驱动装的不对，可以执行<code>emerge -av $(qlist -IC x11-drivers)</code>，我的是nvidia，在make.conf中设置好<code>VIDEO_CARDS="nvidia"</code>，然后装好n卡驱动，在执行<code>nvidia-xconfig</code>后就可以了。</p>

<p>emerge complains  <a href="http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=2&amp;chap=1">click me!</a></p>

<h2 id="why-gentoo-again">Why Gentoo Again</h2>
<ol>
  <li>漂亮的字符界面。第一次虚拟机装Gentoo时的最深的印象。</li>
  <li>强大的portage和emerge。portage告诉emerge在哪里下载源代码，编译选项是什么。</li>
  <li>overlay？就目前的感觉想archlinux的aur。里面应该有不少好玩的东西。</li>
  <li>详尽的文档。</li>
  <li>……</li>
</ol>

<p>实体机用了才不到两天，还有好多好多东西需要学习和探索。Happy Hunting。</p>

<h2 id="de-vs-wm">DE vs WM</h2>
<p>一开始想装wm的，因为在<a href="https://bbs.archlinux.org/viewforum.php?id=47">archlinux forum</a>里看到很多wm非常漂亮，还有很多<a href="https://bbs.archlinux.org/viewtopic.php?id=138281">轻量级软件</a>提供选择。也确实一开始试的是openbox和monsterwm的，还是不习惯。最后换成了KDE，其实KDE以前没怎么用过（其实连linux都没怎么用过，总是不知不觉切会win后就不再进入linux了），就目前来看KDE表现还是不错的，但还是有些问题没有解决。。一开始挺好的，但是感觉有些不稳定，无法启动kde程序，gtk倒是没问题，后来删除了~/.kde4恢复默认设置倒是好了。另外qtconfig配置无法保存，这个直接导致了有些qt程序字体比较难看等。</p>

<h2 id="octopress-in-gentoo">Octopress in Gentoo</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">...custom_require.rb:36:in 'require': cannot load such file auto_gem (LoadError)
</span><span class="line">...custom_require.rb:36:in 'require'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>unset RUBYOPT</code> fix it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Building site: source -&gt; public
</span><span class="line">File "&lt;string&gt;", line 1
</span><span class="line">import sys; print sys.executable
</span><span class="line">^
</span><span class="line">SyntaxError: invalid syntax</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Follow <a href="http://blog.gonzih.org/blog/2011/09/21/fix-octopress-pygments-error-on-arch-linux/">this</a>. But I change rubypython from 0.5.3 to 0.6.3 in Gemfile.lock, it fixs everything I ran into..</p>

<h2 id="reference">Reference</h2>
<ol>
  <li><a href="http://www.google.com">Google</a></li>
  <li><a href="http://www.gentoo.org/doc/en/handbook/">Gentoo Handbook</a></li>
  <li><a href="http://www.gentoo.org/doc/en/xorg-config.xml">Gentoo Xorg</a></li>
</ol>

<h2 id="whats-going-on">What’s Going On</h2>
<p>Keep Using, Keep Hunting。有没有gentoo notes 02我也不知道。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Scream]]></title>
    <link href="http://delta4d.github.com/blog/2012/12/26/the-scream/"/>
    <updated>2012-12-26T22:37:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/12/26/the-scream</id>
    <content type="html"><![CDATA[<p>the little boy inside me lately</p>

<p><a href="http://en.wikipedia.org/wiki/The_Scream">The Scream</a></p>

<p><img src="http://delta4d.github.com/images/2012-12-26-the-scream.jpg" alt="The Scream" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[情人无泪]]></title>
    <link href="http://delta4d.github.com/blog/2012/12/16/lover-no-tears/"/>
    <updated>2012-12-16T10:27:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/12/16/lover-no-tears</id>
    <content type="html"><![CDATA[<p>最近闲里偷忙看完了<a href="http://zh.wikipedia.org/wiki/%E5%BC%B5%E5%B0%8F%E5%AB%BB">张小娴</a>的”情人无泪”，因为是小说精选集，实际上包含了三部小说：卖海豚的女孩，离别曲，和情人无泪。</p>

<p>我不止一次的在心里对自己说“多读些书吧”，大学四年倒是摸过一些书，每次都等到有罚款通知了再把书原封不动的送回图书馆。这学期在98读书版精华区看到有人推荐张小娴的书，便去图书馆借了本“情人无泪”。借书的时候还有件好玩的事，文学类的书都在走廊两边的架子上放着，找了很久，终于在某个书架最底层发现了六本精选集，我随手拿起一本翻着，这时有一个女孩走了过来，蹲下去也拿起了一本，然而很快又放了回去，站了起来，一动不动。旁边静静的杵了一个人总让人觉得有些不自在，于是把书放了回去，这时只见那个女孩迅速蹲下，拿起我刚放下的书，回头就跑。我恍然大悟。</p>

<p>三部小说都比较偏伤感，情人无泪最后真是噙着眼泪读的，我大概还是比较习惯喜剧的东西，就好象Friends和武林外传可以一遍一遍不停的看。本科时有个室友读书时总会先看最后一页，如果是好的结局的话才会开始看这本书，幸好我没有这么做。</p>

<p>三部小说里都有人死去，缇缇带着幸福，夏薇带着悲哀，苏明慧是带着梦想吗。我总觉得很多悲剧本不必如此，很多情况真是一句话可以解决的事情，人可能就是这么固执吧。</p>

<p>沈鱼和翁信良终没有走到一起，从来没有人知道夏薇有一台小绵羊，苏明慧还是到了失明的那一天，本想带给许宏志惊喜去买画具，结果却。。</p>

<p>很多年过去了，还是不会写读后感。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux终端在同一行输出结果]]></title>
    <link href="http://delta4d.github.com/blog/2012/12/11/sh-deleting-one-line/"/>
    <updated>2012-12-11T16:00:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/12/11/sh-deleting-one-line</id>
    <content type="html"><![CDATA[<p>最近了解了一下<a href="http://dwm.suckless.org/">dwm</a>，想定制下状态栏，于是首先想写一个检测内存的脚本。脚本并不复杂，但仍然用了好多时间来查找资料，使用linux果然还是要多写程序脚本啊。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mem_used.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="k">function </span>get_mem_used <span class="o">{</span>
</span><span class="line">	<span class="nb">eval</span> <span class="sb">`</span>free -m | awk <span class="s1">&#39;NR==3 {printf &quot;used=%.2lf per=%.2lf&quot;, $3, 100*$3/($3+$4)}&#39;</span><span class="sb">`</span>
</span><span class="line">	<span class="nb">echo</span> <span class="s2">&quot;MEM:$per%($used MB)&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">while </span><span class="nb">true</span>; <span class="k">do</span>
</span><span class="line"><span class="k">	</span><span class="nb">echo</span> <span class="sb">`</span>get_mem_used<span class="sb">`</span>
</span><span class="line">	sleep 1
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将会产生如下的输出：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">MEM:25.07%(758.00 MB)
</span><span class="line">MEM:25.04%(757.00 MB)
</span><span class="line">MEM:25.07%(758.00 MB)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后我就想如何能让每条记录都在同一行更新，man echo will be helpful。首先使用-e选项开启转义符，\b即为退格</p>

<p>于是可以这样</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo -e "foo"
</span><span class="line">echo -e "\b\b\bbar"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是echo默认输出了换行，于是需要开启-n去掉换行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo -ne "foo"
</span><span class="line">echo -ne "\rbar"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样将会产生正确输出，但是这样太麻烦了，有些时候\b太多，有些时候甚至不能确定有多少个\b</p>

<p>于是可以使用\r，它的作用是使当前光标回到当前行首</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo -ne "foo"
</span><span class="line">echo -ne "\rbar"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就可以了。但是当每次记录长度不一样时还是会出错，比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo -ne "barbar"
</span><span class="line">echo -ne "\rfoo"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样会输出foobar而不是foo</p>

<p>后来查阅资料说可以使用<a href="http://wiki.bash-hackers.org/scripting/terminalcodes">terminalcodes</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo -ne "barbar"
</span><span class="line">echo -ne "\033[1K\rfoo"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>即首先清空行首到当前位置的内容，然后光标回行首，再输出foo</p>

<p>利用以上说的便可以实现很多linux程序等待时出现的<code>/|\-</code>旋转效果</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>rotate.sh  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="k">function </span>rotate <span class="o">{</span>
</span><span class="line">	<span class="nv">cnt</span><span class="o">=</span>0
</span><span class="line">	<span class="k">while </span><span class="nb">true</span>; <span class="k">do</span>
</span><span class="line"><span class="k">		case</span> <span class="nv">$cnt</span> in
</span><span class="line">			0<span class="o">)</span> <span class="nb">echo</span> -ne <span class="s2">&quot;|\r&quot;</span>;;
</span><span class="line">			1<span class="o">)</span> <span class="nb">echo</span> -ne <span class="s2">&quot;/\r&quot;</span>;;
</span><span class="line">			2<span class="o">)</span> <span class="nb">echo</span> -ne <span class="s2">&quot;-\r&quot;</span>;;
</span><span class="line">			3<span class="o">)</span> <span class="nb">echo</span> -ne <span class="s2">&quot;\\r&quot;</span>;;
</span><span class="line">			*<span class="o">)</span> <span class="nb">exit</span> -1;;
</span><span class="line">		<span class="k">esac</span>
</span><span class="line"><span class="k">		</span>sleep 0.2
</span><span class="line">		<span class="o">((</span> <span class="nv">cnt</span><span class="o">=(</span>cnt+1<span class="o">)</span>%4 <span class="o">))</span>
</span><span class="line">	<span class="k">done</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">rotate
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[家路]]></title>
    <link href="http://delta4d.github.com/blog/2012/12/10/music-moved/"/>
    <updated>2012-12-10T22:23:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/12/10/music-moved</id>
    <content type="html"><![CDATA[<p>平常听歌都喜欢随便在豆瓣虾米百度什么的打开随便听听，今天偶然听到一阵旋律，眼角突然就挂上了泪，是一首日文歌，其实歌词也不懂，但突然就很有感触。后来看了下歌曲，是<a href="http://ja.wikipedia.org/wiki/%E4%B8%AD%E5%AD%9D%E4%BB%8B">中孝介</a>的”家路”，原来我只是不知不觉想家了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ひそやかに 影を落とす                   		华灯初上 影子静静地
</span><span class="line">夕映えの街に 灯がともる顷               		留在泻满夕阳的大街上
</span><span class="line">未知し风 吹かれて君は                   		被陌生的风吹拂著的你
</span><span class="line">离れた空の下 何を想う                   		在他乡想著什麼呢
</span><span class="line">足早に过ぎゆく夕空に飞び立つ            		如同掠过暮霭而
</span><span class="line">鸟の群れが家路を辿るように              		归巢的那群鸟一样
</span><span class="line">ここへ戻っておいで君の休まる场所へ      		回来吧 沿著归途
</span><span class="line">空の向こうで明日が手招いてる            		在天空的彼端 明日正在召唤
</span><span class="line">いくつもの梦を数え                      		屈指可数的梦
</span><span class="line">谁もが答えを探している                  		谁都在追寻著答案
</span><span class="line">足早に行き交う人波に 纷れて             		清晨急匆匆的人群
</span><span class="line">君らしさを见失ったなら                  		模糊了你的模样
</span><span class="line">ここへ戻っておいで羽を休める场所へ      		回来吧 沿著归途
</span><span class="line">今日という日を好きになれますように      		珍惜每一个今天
</span><span class="line">今君が流した いとしいその涙が           		而今 若为擦乾你的泪光
</span><span class="line">乾くのなら仆は风にでもなろう            		我愿意化作清风
</span><span class="line">ここへ戻っておいで君の休まる场所へ      		回来吧 沿著归途
</span><span class="line">相変わらずの笑颜で                      		用不变的笑容
</span><span class="line">明日を恙无(つつがな)く过ごせますように  		祈愿明天平安顺利</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evince中文显示错误]]></title>
    <link href="http://delta4d.github.com/blog/2012/11/23/evince-display-chinese-wrong/"/>
    <updated>2012-11-23T19:06:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/11/23/evince-display-chinese-wrong</id>
    <content type="html"><![CDATA[<p>今天用Evince打开一个pdf，本来应该显示中文的地方都是空白，google后发现是<a href="http://poppler.freedesktop.org">poppler</a>的问题，缺少了编码集poppler-data，那么安装好这个包就可一了</p>

<p>on debian</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install poppler-data</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>on archlinux</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo pacman -S poppler-data</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>于是基于poppler的pdf阅读器就都有可能出现这个问题，详见<a href="http://en.wikipedia.org/wiki/Poppler_(software)#PDF_readers_using_Poppler">PDF Readers Using Poppler</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM function already exists]]></title>
    <link href="http://delta4d.github.com/blog/2012/11/16/vim-function-already-exists/"/>
    <updated>2012-11-16T23:55:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/11/16/vim-function-already-exists</id>
    <content type="html"><![CDATA[<p>由于每次修改vimrc后都要重启vim才会在读取配置文件，感觉非常麻烦。（汗，认识vim时间也不短了，但一直木有进步。。）后来觉得可以source，于是自定义了快捷键</p>

<pre><code>map &lt;silent&gt; &lt;leader&gt;ss :!source ~/.vimrc
</code></pre>

<p>但是显示了一大堆错误，大家可能已经看出来了，对的，不应该加<em>!</em>的，vimrc不应该由shell来解释，而应该由vim解释，于是修改为：</p>

<pre><code>map &lt;silent&gt; &lt;leader&gt;ss :source ~/.vimrc
</code></pre>

<p>但是这样会出现<em>function xxx already exists add ! to replace it</em>的警告，按照提示在function后加上!就可以消除警告了，这是由于如果函数出现过，加入!会redifine。555，rbl。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[latex test]]></title>
    <link href="http://delta4d.github.com/blog/2012/11/11/latex-test/"/>
    <updated>2012-11-11T23:33:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/11/11/latex-test</id>
    <content type="html"><![CDATA[<p>$\LaTeX$ using kramdown</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<p>see <a href="http://chuchao333.github.com/blog/2012/08/18/supporting-latex-in-octopress/">this</a> for more details</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use octopress on a new computer]]></title>
    <link href="http://delta4d.github.com/blog/2012/11/10/use-octopress-on-a-new-computer/"/>
    <updated>2012-11-10T19:37:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/11/10/use-octopress-on-a-new-computer</id>
    <content type="html"><![CDATA[<p>when you are bloging with octopress, don’t forget the following commands</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git add .
</span><span class="line">git commit -m 'ur commit'
</span><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>then when you are on another computer, trying to setup a bloging enviroment with octopress, because ‘rake deploy’ upload the generated files, so it needs a little work, you can go like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ git clone git@github.com:username/username.github.com.git
</span><span class="line">$ cd username.github.com
</span><span class="line">username.github.com$ git checkout source
</span><span class="line">username.github.com$ mkdir _deploy
</span><span class="line">username.github.com$ cd _deploy
</span><span class="line">username.github.com/_deploy$ git init
</span><span class="line">username.github.com/_deploy$ git remote add origin git@github.com:username/username.github.com.git
</span><span class="line">usename.github.com/_deploy$ git pull origin master
</span><span class="line">usename.github.com/_deploy$ cd ..</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>reference:
<a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello, world!]]></title>
    <link href="http://delta4d.github.com/blog/2012/11/10/hello-world/"/>
    <updated>2012-11-10T18:32:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/11/10/hello-world</id>
    <content type="html"><![CDATA[
<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;hello,world!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[n个小球放进m个盒子]]></title>
    <link href="http://delta4d.github.com/blog/2012/10/12/n-ball-2-m-box/"/>
    <updated>2012-10-12T21:02:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/10/12/n-ball-2-m-box</id>
    <content type="html"><![CDATA[<p>基本的排列组合问题，因为老碰到，所以稍微做下总结。  </p>

<p>一般可以按照球是否可区别，盒子是否可区别，盒子是否可空，分为2^3=8种情况，但是实际上总可以通过调整使得盒子可空转化为盒子不可空的情况，比如有n个小球，m个盒子，设每个盒子内小球数量为x[i]，那么x[1]+x[2]+…+x[m]=n，那么通过变换x’[i] = x[i] + 1，变为x’[1]+x’[2]+…+x’[m]=n+m，于是转化为将n+m个小球放入m个盒子，盒子不能为空的问题。有些情况下要    求某些盒子不为空，有些可空，那么对相应的x[i]做以上变换即可。于是接下来的讨论都是针对盒子非空的情况，共有2^2=4种情形：  </p>

<h3 id="section">1. 小球无区别，盒子有区别</h3>
<p>这是四种情况里最简单的一种，也是最常见的一种，共有C(n-1,m-1)种放法，可以由隔板法得到结果。  </p>

<h3 id="section-1">2. 小球无区别，盒子无区别</h3>
<p>用f(x,y)表示x个无区别小球放入y个无区别盒子的方法数，考虑<br />
x[1]+x[2]+…+x[y]=x……(1)<br />
(x[1]-1)+(x[2]-1)+…+(x[y]-1)=x-y……(2)<br />
考虑满足x[i]=1的i的个数，如果有k个i满足x[i]=1，那么(2)中将会少k项，即为将x-y个小球放入y-k个盒子的方法数，即f(x-y,y-k)<br />
让k跑遍0到y，于是f(x,y)=f(x-y,0)+f(x-y,1)+f(x-y,2)+…+f(x-y,y)<br />
那么f(x-1,y-1)=f(x-y,0)+f(x-y,1)+…+f(x-y,y-1)<br />
将两式相减，得到f(x,y)-f(x-1,y-1)=f(x-y,y)，于是f(x,y)=f(x-1,y-1)+f(x-y,y)<br />
初始条件为f(x,1)=f(x,x)=1<br />
再回头看看这个递推式，其实对于f(x,y)，考虑以下两种情况：<br />
若有一个盒子内的小球数等于1，不妨设为x[1]，那么拿掉x[1]后就是x-1个小球放入y-1个盒子的情况<br />
若每个盒子内的小球数都大于1，那么从每个盒子中都拿走一个小球，就变为了x-y个小球放入y个盒子的情况<br />
于是也可以得到f(x,y)=f(x-1,y-1)+f(x-y,y)<br />
由于数学能力有限，暂不清楚是否有收敛的形式。  </p>

<h3 id="section-2">3. 小球有区别，盒子无区别</h3>
<p>这实际上就是<a href="http://en.wikipedia.org/wiki/Stirling_number">第二类Stirling数</a><br />
设S(x,y)表示x个有区别小球放入y个无区别盒子的方法数。那么考虑某个特定小球：<br />
如果它单独放到了某个盒子里，去掉这个盒子的话，就转化为x-1个小球放入y-1个盒子的情况，即S(x-1,y-1)。<br />
如果它和其他的小球共同在一个盒子里，那么去掉这个小球，就转化为x-1个小球放入y个盒子的情况，这个小球可以在y个盒子里任意一个，共y种情况，共y<em>S(x-1,y)种情况<br />
所以：S(x,y)=S(x-1,y-1)+y</em>S(x-1,y)<br />
初始条件为：S(x,1)=S(x,x)=1  </p>

<h3 id="section-3">4. 小球有区别，盒子有区别</h3>
<p>和上边的情况类似，只是加了盒子有区别，那么当分好小球后，再加上盒子的排列数就好了，共有m!S(n,m)种放法。  </p>

<p>by delta</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Pacman] not enough random bytes available]]></title>
    <link href="http://delta4d.github.com/blog/2012/05/25/pacman-not-enough-random-bytes-available/"/>
    <updated>2012-05-25T15:21:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/05/25/pacman-not-enough-random-bytes-available</id>
    <content type="html"><![CDATA[<p>pacman更新到4.x中出现了认证系统，需要先执行pacman-key –init来生成key，但是这时可能出现not enough random bytes available，后来查了下发现Linux系统生成随机数是根据系统熵来获得的，这是因为系统熵不够的缘故。系统熵值可以通过</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">cat /proc/sys/kernel/random/entropy_avail
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>来查看。所谓熵就是系统的混乱程度。</p>

<p>如果你在图形界面的话，那么只要鼠标动几下就可以获得很高的熵值。</p>

<p>如果在字符界面的话，那么可以用手随便敲一些命令，无效的也可以，反正我是对着键盘乱敲的= =，这时可能会使得熵值达到3000多一点，这样执行pacman-key可能还是会报熵值不足，不要着急按Ctrl+C，这时你可以通过Ctrl+Alt+F2切换到tty2，然后继续对着键盘一阵乱敲，然后切换到tty1，就会发现命令已经执行完了。其实只要做一些大量IO的事情就可以了，比如cp一个大体积文件，或者使用dd等等，不一一说明了。</p>

<p>pacman更新好后，pacman.conf可能需要改一下，查看/etc目录会发现有两个pacman配置文件，一个是旧的pacman.conf，一个是4.x的pacman.conf.pacnew，只需要将后者覆盖前者就可以了，记着要对前者备份哦。新的配置文件中有SigLevel选项，默认应该是关闭的，你可以根据需求进行选择：</p>

<ul>
  <li>Required: 强制检查签名</li>
  <li>Optional: 如果签名存在就检查，但会接受未签名软件包和数据库</li>
  <li>Never:不会进行任何签名检查。</li>
</ul>

<p>如果开启签名的话，后面安装软件的过程中可能还会遇到一些其他问题，这里就不一一说明了。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell script while cmd output]]></title>
    <link href="http://delta4d.github.com/blog/2012/05/23/shell-script-while-cmd-output/"/>
    <updated>2012-05-23T15:18:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/05/23/shell-script-while-cmd-output</id>
    <content type="html"><![CDATA[<p>zz《精通UNIX shell脚本编程》
这是节省CPU周期和磁盘I/O时间的一个小技巧，而且不受管道的2048个字符数的限制</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="k">while </span><span class="nb">read </span>LINE
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;$LINE&quot;</span>
</span><span class="line">    :
</span><span class="line"><span class="k">done</span> &lt; &lt;<span class="o">(</span><span class="nb">command</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个方法看起来有点奇特。这里所作的就是在done循环中止符之后，从循环底部进行输入重定向，用done&lt;表示。&lt;(command)符号执行命令，并把命令的输出结果指向循环底部。
注意：在&lt; &lt;(command)中的两个&lt; &lt;之间必须有空格</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[win7 no sound]]></title>
    <link href="http://delta4d.github.com/blog/2012/05/06/win7-no-sound/"/>
    <updated>2012-05-06T23:52:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/05/06/win7-no-sound</id>
    <content type="html"><![CDATA[<p>今天可能由于卸载了实况还是什么导致系统没有声音了，重装了声音驱动也不行</p>

<p>后来运行dxdiag提示缺少ksuser.dll，下了ksuser.dll后解决问题</p>

<p>另外缺少了ksuser.dll新浪体育视频直播也不能正常播放了。。</p>

<p>参考http://baike.baidu.com/view/660830.htm?fromTaglist</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[donelist 2011 & todolist 2012]]></title>
    <link href="http://delta4d.github.com/blog/2012/04/06/donelist-2011-and-todolist-2012/"/>
    <updated>2012-04-06T00:51:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/04/06/donelist-2011-and-todolist-2012</id>
    <content type="html"><![CDATA[<p>去年我问今天现在会是什么表情，我现在坐在计算机前没什么表情</p>

<h3 id="donelist-2011">donelist 2011</h3>

<ol>
  <li>多做在线比赛，尤其是Codeforces的和Topcoder的
    <ul>
      <li>Codeforces做了挺多的，Topcoder很少做，最近很少做了</li>
    </ul>
  </li>
  <li>每场比赛后都要写解题报告
    <ul>
      <li>只坚持了几场，由于能做的题目太少了，赛后又很少去fix，弱爆了</li>
    </ul>
  </li>
  <li>多和同学交流
    <ul>
      <li>这条完成的还算不错</li>
    </ul>
  </li>
  <li>多瞻仰大牛代码和博客
    <ul>
      <li>谈不上多，偶尔会看了一些</li>
    </ul>
  </li>
  <li>先努力进入集训队，再努力进入校队
    <ul>
      <li>幸运的做到了，幸运的和肥羊还有riversouther组成RunForDream征战regional</li>
    </ul>
  </li>
  <li>学习python
    <ul>
      <li>学了，又忘了</li>
    </ul>
  </li>
  <li>学习网页的开发，网络编程
    <ul>
      <li>学了一点，又忘了</li>
    </ul>
  </li>
  <li>看《具体数学》，做完练习题
    <ul>
      <li>数论之后的就没有做了</li>
    </ul>
  </li>
  <li>专业课程学习也要抓紧，经过3年的实践，我发现还是成绩考得高点心里比较舒服，嗯嗯
    <ul>
      <li>我自欺欺人了，专业课程马马虎虎，兴趣不大</li>
    </ul>
  </li>
  <li>好好考虑自己的未来，到底考研还是不考呢？？
    <ul>
      <li>最后幸运的保研了</li>
    </ul>
  </li>
  <li>为Arsenal祈福，甭管啥冠军，赶紧拿一个先，还有门将赶紧给换掉吧
    <ul>
      <li>F4和N8出走，依旧无冠，门将位置发掘了ccc尼，虽然有时也失误，但比阿穆霸气靠谱多了。。</li>
    </ul>
  </li>
  <li>多做运动，少玩游戏
    <ul>
      <li>呵呵</li>
    </ul>
  </li>
  <li>星期四看火影，星期天看海贼和柯南
    <ul>
      <li>只追了海贼，还看了好多动漫，现在都静不下来去看东西了。。</li>
    </ul>
  </li>
  <li>看美剧的时候不带字幕看一遍，带着英文字幕再看一遍
    <ul>
      <li>这个做到了，因为急着想看但还没有出字幕所以只能不带字幕看，然后因为听不懂= =，所以只能带着字幕再看一遍。。</li>
    </ul>
  </li>
  <li>晚上不洗澡的话，尽量洗洗脚
    <ul>
      <li>呵呵</li>
    </ul>
  </li>
  <li>嗯，先这样吧
    <ul>
      <li>嗯</li>
    </ul>
  </li>
</ol>

<h3 id="todolist-2012">todolist 2012</h3>

<ol>
  <li>争取进省赛，话说8号就是ACM校赛了，希望能和队友玩的开心</li>
  <li>体测补测一定要及格</li>
  <li>毕业设计要赶紧做，求顺利毕业</li>
  <li>多看书，读各类经典</li>
  <li>要练习练听力，其实就是看美剧，话说”how I met your mother”里的mother肿么还不出来</li>
  <li>多搞搞Linux，其实一直都断断续续的，用过一阵，后来还是耐不住游戏的寂寞回到win</li>
  <li>好好学数学</li>
  <li>多参加codeforces和topcoder之类的比赛</li>
  <li>学学日语，看动漫玩游戏可以方便点</li>
  <li>晚上坚持跑步</li>
  <li>陪着Arsenal</li>
  <li>多看看密码算法</li>
  <li>嗯，先这样吧</li>
</ol>

<p>以后还是过年的时候写todolist吧。。</p>

<p>2013新年我又会是一副什么样子，带着怎样的心情。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Pacman] "filesystem: /etc/mtab exists in filesystem"]]></title>
    <link href="http://delta4d.github.com/blog/2012/02/29/pacman-fiwlesystem-mtab-exists-in-filesystem/"/>
    <updated>2012-02-29T11:11:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/02/29/pacman-fiwlesystem-mtab-exists-in-filesystem</id>
    <content type="html"><![CDATA[<p>fixed by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">pacman -S filesystem --force
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://www.archlinux.org/news/filesystem-upgrade-manual-intervention-required/">http://www.archlinux.org/news/filesystem-upgrade-manual-intervention-required/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[archlinux中kde环境下gtk程序美化]]></title>
    <link href="http://delta4d.github.com/blog/2012/02/21/make-gtk-program-beautiful-in-kde/"/>
    <updated>2012-02-21T20:14:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/02/21/make-gtk-program-beautiful-in-kde</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">pacman -S gtk-chtheme
</span><span class="line">yaourt -S oxygen-molecule-theme
</span><span class="line">gtk-chtheme
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在theme中选择kde44-oxygen-molecule</p>

<p><a href="https://wiki.archlinux.org/index.php/Uniform_Look_for_QT_and_GTK_Applications">https://wiki.archlinux.org/index.php/Uniform_Look_for_QT_and_GTK_Applications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux音频乱码]]></title>
    <link href="http://delta4d.github.com/blog/2012/01/26/linux-audio-garbled/"/>
    <updated>2012-01-26T20:20:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/01/26/linux-audio-garbled</id>
    <content type="html"><![CDATA[<p>mp3文件采用gbk编码，而linux使用utf8，所以会造成混乱</p>

<p>使用python-mutagen可以解决</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">mid3iconv -e gbk *.mp3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>详细参考：
<a href="http://yp.oss.org.cn/software/show_resource.php?resource_id=313">http://yp.oss.org.cn/software/show_resource.php?resource_id=313</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start ibus at boot]]></title>
    <link href="http://delta4d.github.com/blog/2012/01/25/start-ibus-at-boot/"/>
    <updated>2012-01-25T19:59:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2012/01/25/start-ibus-at-boot</id>
    <content type="html"><![CDATA[<p>backup</p>

<p>~/.profile</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># ibus start at boot</span>
</span><span class="line"><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span>@im<span class="o">=</span>ibus
</span><span class="line"><span class="nb">export </span><span class="nv">GTK_IM_MODULE</span><span class="o">=</span>ibus
</span><span class="line"><span class="nb">export </span><span class="nv">QT_IM_MODULE</span><span class="o">=</span>ibus
</span><span class="line">ibus-daemon -d -x
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
