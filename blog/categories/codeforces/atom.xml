<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | Try To Think]]></title>
  <link href="http://delta4d.github.com/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://delta4d.github.com/"/>
  <updated>2013-04-14T20:23:40+08:00</updated>
  <id>http://delta4d.github.com/</id>
  <author>
    <name><![CDATA[delta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #179 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/04/12/codeforces-round-number-179-div-1/"/>
    <updated>2013-04-12T14:09:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/04/12/codeforces-round-number-179-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-greg-and-arrayhttpwwwcodeforcescomcontest295problema"><a href="http://www.codeforces.com/contest/295/problem/A">A. Greg and Array</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/179/1/A.cpp">source code</a></p>

<p>一个数组a，有一些系列操作l,r,d，给a[l..r]中的每个数加d，现在有一系列询问x,y，表示执行操作x..y。输出所有询问后的数组。</p>

<p>每个操作l,r,d可以看作a[l]+=d,a[r+1]-=d，于是a[i]的大小即sum[1..i]，询问x,y可以看作操作x,y,1，只不过对应的是操作数组。</p>

<h2 id="b-greg-and-graphhttpwwwcodeforcescomcontest295problemb"><a href="http://www.codeforces.com/contest/295/problem/B">B. Greg and Graph</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/179/1/B.cpp">source code</a></p>

<p>给一个500个点的有向图，现在按给定顺序依此去除一个点，每次去点时输出所有点对最短路的和。</p>

<p>采用<a href="http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm">Floyd</a>，按照去除点列的逆序一次加一个点。</p>

<h2 id="c-greg-and-friendshttpwwwcodeforcescomcontest295problemc"><a href="http://www.codeforces.com/contest/295/problem/C">C. Greg and Friends</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/179/1/C.cpp">source code</a></p>

<p>过河问题，但是人的重量只有50和100两种，人数为50。现在查询最少需要几步使得所有人到达对岸，在最少的情况下有多少中乘船方案。</p>

<p>记录50的人数a，100的人数b，现在是要过对岸还是返程turn，bfs一遍(a,b,turn)，更新最短路，并且计数。</p>

<h2 id="d-greg-and-caveshttpwwwcodeforcescomcontest295problemd"><a href="http://www.codeforces.com/contest/295/problem/D">D. Greg and Caves</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/179/1/D.cpp">source code</a></p>

<p>nxm的矩形方阵，存在这么一些行[l..r]，每一行只有两个格子是黑色，存在t，对于[l..t]的行，第i行的以黑色块为端点构成的线段包含在i+1行对应的线段内，[t..r]内刚好相反，i+1包含在i内。求所有染色方案数。</p>

<p>如果以t为分界的话，那么上面是一个类似三角的图形，下面是一个倒三角，所以只需计算形成三角形的方案数。设f(i,j)表示三角形第i层长度为j的方案数，那么第i-1层的长度可以有2..j种，i-1层长度为k包含在长度为j的线段上的方案数为j-k+1，于是可以得到递推关系:</p>

<script type="math/tex; mode=display">
f(i,j)=\sum_{k=2}^{j}f(i-1,k)*(j-k+1)
</script>

<p>化简得到：</p>

<script type="math/tex; mode=display">
f(i,j)=2f(i,j-1)-f(i,j-2)+f(i-1,j)
</script>

<p>接下来就可以枚举t，和第t行的长度k。这里t需要做一个确切的定义，取最后一个使[l..t]“递增”的t，即t+1相对于t是严格减小的。于是对应一个(t,k)枚举上三角的高度和下三角的高度就可以了。对于一个高度为h，最后一行长度为k，倒数第二行严格小与最后一行的方案数为f(h,k)-f(h,k-1)。</p>

<p>那么上三角总数为</p>

<script type="math/tex; mode=display">
A(t,k)=\sum_{i=0}^{k}f(1,i)
</script>

<p>下三角总数为</p>

<script type="math/tex; mode=display">
B(t,k)=\sum_{i=2}^{n-t+1}(f(i,k)-f(i-1,k))+f(1,k)=f(n-t+1,k)
</script>

<p>第t行长度为k共有m-k+1排法，于是最后的方案总数为：</p>

<script type="math/tex; mode=display">
T(n,m)=\sum_{t=1}^{n}\sum_{k=2}^{m}(A(t,k)*B(t,k)*(m-k+1))
</script>

<h2 id="e-yaroslav-and-pointshttpwwwcodeforcescomcontest295probleme"><a href="http://www.codeforces.com/contest/295/problem/E">E. Yaroslav and Points</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/179/1/E.cpp">source code</a></p>

<p>有一个数列{xi}，现在有一个操作i,pi,di，表示x[pi]=x[pi]+di，有一系列查询l，r表示查询位于区间[l,r]内的xi的两两差的和，即<script type="math/tex">\sum_{l\le x_i\le xj\le r}(x_j-x_i)</script>。</p>

<p>具体做法是线段树，所查询的和可以由两个部分合并，每个区段需要保留三个参数，该区间内数的多少，数的和，和该区间内的两两差的和。</p>

<h2 id="summary">Summary</h2>

<p>A比较顺利，B一开始将500看成5000了，想不出来，后来仔细一看发现是500，赶紧按floyd写了一遍，提交wa，后来又wa了两次，在还剩30min的时候过掉，当时没有想清楚就直接写然后交了，以后一定要先想清楚，否则真是得不偿失啊。后来看C，虽然可以做，但是实在没有20min写对的实力，如果B过的快一点，C还是有可能的。很不扎实啊，尤其是B的floyd。啊啊啊，弱爆了弱爆了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #177 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/04/03/codeforces-round-number-177-div-1/"/>
    <updated>2013-04-03T13:11:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/04/03/codeforces-round-number-177-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-polo-the-penguin-and-stringshttpwwwcodeforcescomcontest288problema"><a href="http://www.codeforces.com/contest/288/problem/A">A. Polo the Penguin and Strings</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/177/1/A.cpp">source code</a></p>

<p>有这样一种字符串，它只含有k个不同的字母，长度为n，并且相邻字符不相同。给定n和k，输出字典序最小的那个，不存在的话输出-1。</p>

<p>首先考虑不存在的情况，即不能满足相邻字符不相同，或不够k个字符，即n&gt;&amp;&amp;1k=1和k&gt;n的情况。存在的情况下，由于要求字典序最小所以贪心使用ab的重叠就好了。</p>

<h2 id="b-polo-the-penguin-and-houseshttpwwwcodeforcescomcontest288problemb"><a href="http://www.codeforces.com/contest/288/problem/B">B. Polo the Penguin and Houses</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/177/1/B.cpp">source code</a></p>

<p>有n个房子编号1-n，每个房子有一个门牌号(1-n)，房子x的门牌号记为Px，注意门牌号是可以重复的，当你到房子x时，下一步到Px，然后到P(Px)…，现在已知：</p>

<pre><code>1. 从1-k出发，都会回到1
2. 从k+1-n出发，都不会回到1
3. 从1出发，经过非0步回到1
</code></pre>

<p>现在给定n，k，确定有多少种门牌号编排方案。其中k&lt;=8。</p>

<p>由条件知，从1-k出发都不可能到达k+1-n，从k+1-n出发也不可能到1-k。于是由于k的范围很小，可以暴力出1-k的方案数。k+1-n为(n-k)^(n-k)种，然后乘起来就好了。</p>

<h2 id="c-polo-the-penguin-and-xor-operationhttpwwwcodeforcescomcontest288problemc"><a href="http://www.codeforces.com/contest/288/problem/C">C. Polo the Penguin and XOR operation</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/177/1/C.cpp">source code</a></p>

<p>0-n这n+1个数有一个排列{pi}，对于每一个排列对应一个数值p=(0^p0)+(1^p1)+…+(n^pn)，求p的最大值。</p>

<p>采用贪心。对于每个数x，去掉x的二进制最高位后，然后取反得到x’，则x’&lt;x，使得x^x’最大。即对于任何一个x都存在一个x’&lt;x与之对应，并且这种对应是唯一的，即不会有x!=y，而x’=y’，于是从n开始倒序搜索，总可以进行这样的匹配。</p>

<h2 id="d-polo-the-penguin-and-treeshttpwwwcodeforcescomcontest288problemd"><a href="http://www.codeforces.com/contest/288/problem/D">D. Polo the Penguin and Trees</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/177/1/D.cpp">source code</a></p>

<p>给一棵树，查询这样元组(a,b,c,d)的个数，其中a&lt;b,c&lt;d，并且a和b的最短路与c和d的最短路没有公共节点。</p>

<p>从反面考虑，不考虑条件，所有元组的个数为C(n,2)^2，然后去除最短路有公共点的元组。若公共点为x，则最短路经过x的点对有两种：</p>

<pre><code>1. a和b分别在x的两个儿子形成的子树中
2. a在x为根的子树中，b在除x子树的剩余节点中
</code></pre>

<p>a和b都在除x子树的剩余节点是不行的，这样最短路肯定不会通过x了。这样的话只需要dfs一遍就可以了。</p>

<h2 id="e-polo-the-penguin-and-lucky-numbershttpwwwcodeforcescomcontest288probleme"><a href="http://www.codeforces.com/contest/288/problem/E">E. Polo the Penguin and Lucky Numbers</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/177/1/E.cpp">source code</a></p>

<p>lucky number是十进制位只含有4和7的数，现在给定一个区间[l,r]，其中l和r都是lucky number，位于[l,r]之内的lucky number为{ai}，求a1a2+a2a3+…+a(n-1)an。</p>

<p>采用dp解决，从高位向低位扫描。只需要计算[44..4,l]和[44..4,r]的结果就可了，然后二者相减就得到了结果。比如[444,747]，观察如下图表，每一次的{ai}，对应到下一次为{10ai+4,10ai+7}，只有最后一个an有所区别，有可能没有10an+7。</p>

<pre><code>1-----2------3

       /-- 444
   - 44 -- 447
  /    /-- 474
4 -- 47 -- 477
       /-- 744
7 -- 74 -- 747
</code></pre>

<p>看到这样的关系后就可以写转移方程了，设F[n]为题目所求，K[n]为当前数{ai}的多少，比如上图中K[1]=1,K[2]=3,K[3]=6。</p>

<script type="math/tex; mode=display">% &lt;![CDATA[


\begin{align*}

& F_{n+1} = \sum_{i=1}^{K_n-1}(10a_i+4)(10a_i+7) + \sum_{i=1}^{K_n-1}(10a_i+7)(10a_{i+1}+4) \\

& F_{n+1} = 100F_n+100\sum_{i=1}^{K_n-1}a_i^2 + 220\sum_{i=1}^{K_n-1}a_i+56(K_n-1)+70(a_{K_n}-a_1) \\

\end{align*}

 %]]&gt;</script>

<p>上面是对于当前处理字符为4的情况，7的情况只需要再加上最后一项<script type="math/tex">(10a_{K_n}+4)(10a_{K_n}+7)</script>即可，然后可以设</p>

<script type="math/tex; mode=display">
	S_n = \sum_{i=1}^{K_n-1}a_i, \quad T_n = \sum_{i=1}^{K_n-1}a_i^2
</script>

<p>求出对应的递推关系，就可以了。</p>

<h2 id="summary">Summary</h2>

<p>A，B，C较以往的比赛难度并不算太高，算是比较幸运的在一个小时内1y了前三题，后面一个小时就打酱油了，还是缺乏砍难题的能力啊，啊啊啊，弱爆了弱爆了。</p>

<p>D比赛的时候走偏了，我首先去计算没有公共节点的元组，然后再在这些元组中去去重，始终想不到好的方法，加上自己也确实缺少能够搞定D的信心，后面也就没有再深入去想了。如果开始从更大的角度从反面考虑的话，或许会有一些想法。啊啊，以后做题一定要霸气啊，管他ABCDE，嗯嗯。还有就是要从更多角度去思考问题，但是很多时候真的找不到合适的角度诶，要多做题，多看大牛代码，多看大牛文章。</p>

<p>E花了一天终于搞定了，略兴奋。主要是要发现前后ai之间的关系，然后就只剩下一些计算了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #176 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/03/23/codeforces-round-number-176-div-1/"/>
    <updated>2013-03-23T23:12:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/03/23/codeforces-round-number-176-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-lucky-permutationhttpwwwcodeforcescomcontest286problema"><a href="http://www.codeforces.com/contest/286/problem/A">A. Lucky Permutation</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/176/1/A.cpp">source code</a></p>

<p>判定是否存在一个置换使得一个序列经过两次相同的置换达到逆序。</p>

<p>考虑若P(x)=y，则由于P(P(x))=n-x+1，则P(y)=n-x+1，即P(x)=y =&gt; P(y)=n-x+1，连续应用此式可以得到</p>

<pre><code>P(x) = y
P(y) = n - x + 1
P(n - x + 1) = n - y + 1
P(n - y + 1) = x
</code></pre>

<p>即4个构成一组，于是当n%4=0或1时存在解，否则不存在。</p>

<p>不知道为什么，感觉有点像密码学里的<a href="http://en.wikipedia.org/wiki/Meet-in-the-middle_attack">Meet-In-The-Middle</a></p>

<h2 id="b-shiftinghttpwwwcodeforcescomcontest286problemb"><a href="http://www.codeforces.com/contest/286/problem/B">B. Shifting</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/176/1/B.cpp">source code</a></p>

<p>对于一个序列{pi}，定义操作f(p,k)为将序列按k个分为一组，最后一组若不够分，则含有n%k个元素，然后对于每一个小组循环左移。问f(f(…f(p=[1,2,…,n],2)…,n-1),n)是多少。</p>

<p>对于每一个k，共进行n/k次循环左移，共有n(1/2+1/3+…+1/n)=nln(n)次循环左移，只需要将每次循环左移复杂度降到O(1)就可以了。比如f([1..9], 3)：</p>

<pre><code>1 2 3 4 5 6 7 8 9 =&gt;
2 3 1 5 6 3 8 9 7
将被移动的字符看作*，于是：
* 2 3 * 5 6 * 8 9
  2 3 * 5 6 * 8 9 *
这样就可以将左移变为O(1)了
</code></pre>

<h2 id="c-main-sequencehttpwwwcodeforcescomcontest286problemc"><a href="http://www.codeforces.com/contest/286/problem/C">C. Main Sequence</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/176/1/C.cpp">source code</a></p>

<p>定义一个正确的括号序列为：</p>

<pre><code>1. 空序列为括号序列
2. 若{a1, a2, ..., al}和{b1, b2, ..., bk}是括号序列，则{a1, a2, ..., al, b1, b2, ..., bk}也是括号序列
3. 若{a1, a2, ..., al}是括号序列，则{v, a1, a2, ..., al, -v}是括号序列，v是一个正整数
</code></pre>

<p>现在有一个括号序列{xi}，已知{pi=|xi|}，和{i|xi&lt;0}的一个子集，问是否可以还原{xi}，若存在多解，任意输出一个，否则输出NO。</p>

<p>和正常的括号匹配差不多，因为要求了某些必须取负数，即相当于有括号，所以从右向左压栈，然后正常的匹配就可以了。</p>

<h2 id="d-touristshttpwwwcodeforcescomcontest286problemd"><a href="http://www.codeforces.com/contest/286/problem/D">D. Tourists</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/176/1/D.cpp">source code</a></p>

<p>在(-1,0)和(1,0)处有两个人同时沿Oy正方向运动，每秒运动一个单位，现在在某个时刻t会出现(0,a)-(0,b)这样一堵墙，若此时两个人正好位于Oy的[a,b]之间那么这两个人就互相看不见对方，现在给出所有这样的(a,b,t)三元组，还有从q1，q2…时刻出发的人，查询每对人有多长时间是看不到对方的。(a,b,t,qi&gt;=0)</p>

<p>以时间t为自变量，纵坐标为应变量，用x表示，那么对于从时间t出发的人对应的关系为x=t-q（更精确的应该为x=max(0,t-q)，然而因为墙壁不会出现在负轴，所以写成这样对结果没有影响），对于每个墙壁(a,b,t)，关系为x=a,t=t与x=b,t=t之间的带状区域，可以看到被挡到的时间为x=t-q被带状区域所截取的线段的横截距，因为斜率为1，所以也等于纵截距。为了便于判断相交和计算做坐标变换(t,x)=&gt;(t-x,x)，那么人的方程变为t=q，是一条垂直于横轴的直线,带状区域变为左顶角为PI/4的梯形，此时所求即为直线和这个梯形交集的纵截距，也等于q-t（t为梯形最左点的横坐标）可以将梯形看作两个PI/4的角的交，只是在计算的时候下面的角是被减掉的，如果处理出所有这样的角的话，就很容易计算了。比如q和ti(0&lt;=i&lt;k)相交，那么最后所求为sigma(q-ti)=k*q-sigma(ti)，这样只需要处理出ti前缀和，最后二分就可以了。处理角的过程是将所有带状区域的上下边界统一排序，并且维护当前所有线对应的出现时间的最小值，用堆就可以了，当处理到某个区域的下界的时候，这个区域对应的时间t要出堆，依次处理就可以了。</p>

<h2 id="e-ladies-shophttpwwwcodeforcescomcontest286probleme"><a href="http://www.codeforces.com/contest/286/problem/E">E. Ladies’ Shop</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/176/1/E.cpp">source code</a></p>

<p>有一些背包，只能够装重量为ai的物品，不能多也不能少，现在有一些物品，但是重量还没有确定，现在让你确定重量1&lt;=p1&lt;p2&lt;…&lt;pk满足下列条件（每个重量的物品有无穷多个）</p>

<pre><code>1. 每个包都会被用到。即对于每一个i都存在一些物品它们的总重量为ai
2. 对于任何不超过m的重量的物品，必须有一个包可以放置它
3. 对于满足1和2的重量分配，使k最小化
</code></pre>

<p>题目意思就是说对于物品{pi}它们的任意不大于m的组合都能在{ai}中找到，比较直接的做法就是无限背包作出所有不大于m的重量，然后去和{ai}比较，但是n,m=10^6，这样会超时，首先，所有重量肯定是{ai}的一个子集，否则就会不满足条件2，其次，加入{pi}是一个满足条件的重量分配，对于每一个i，pi,2pi,3pi…tpi&lt;=m都应该有包对应，即总存在某个j使得aj=x*pi，于是要找出所有组合只需要将{ai}中的任意两个相加就可以判断出{pi}的所有组合了，将{ai}看作一个数，它的平方即为任意两个的和，于是可以用<a href="http://en.wikipedia.org/wiki/Fast_Fourier_transform">FFT</a>做了，采用<a href="http://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm">[Cooley–Tukey FFT algorithm]</a>（这个算法于1965年提出，实际上只是重新发现了<a href="http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss">Gauss</a>在1805年提出的算法，orz）。假若平方封闭，那么便是可以分配，否则不存在方案，要最小化k，只需要选那些最小的元，即所有其他的重量里没有它的因子。</p>

<h2 id="summary">Summary</h2>

<p>弱爆了啊。42min才搞出A，然后一直再搞B，其实应该多看下C的，最后15min看了C，就感觉很可搞，可惜时间不多了，情急之下居然把statck写成queue了，赛后稍微调了一下就过了。这次还是出现了会做的题目在比赛中没有做出来的情况&gt;_&lt;。B还是该早些放弃的，D和E压根就没有读题，以后至少要将每道题目都读一遍，至于会不会做就是另外一回事了。啊啊啊，弱爆了弱爆了。 </p>

<p>终于fix了D和E，D首先要用数学的语言去描述题目场景，那个坐标变换太神了。E首先要从题目条件判断出重量是{ai}的子集，然后就要看能不能联想到FFT了。啊啊啊，弱爆了弱爆了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #174 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/03/18/codeforces-round-number-174-div-1/"/>
    <updated>2013-03-18T21:00:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/03/18/codeforces-round-number-174-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-cows-and-sequencehttpwwwcodeforcescomcontest283problema"><a href="http://www.codeforces.com/contest/283/problem/A">A. Cows and Sequence</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/A.cpp">source code</a></p>

<p>对于一个数列，有三个操作：</p>

<pre><code>1. 给a个数同时加x
2. 在末尾加入元素k
3. 去掉末尾的元素
</code></pre>

<p>对于每一次操作，查询数列的平均值，共有2*10^5次操作。三个操作都可以看作区间操作，[1,a]上同时加x，[sz,sz+1]加x，[sz-1,sz]减去数列末尾sz处的值，于是可以用树状数组来做。 </p>

<h2 id="b-cow-programhttpwwwcodeforcescomcontest283problemb"><a href="http://www.codeforces.com/contest/283/problem/B">B. Cow Program</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/B.cpp">source code</a></p>

<p>初始时给定两个数x=1，y=0，还有一个序列{an}，在这个基础上有一些列操作</p>

<pre><code>1. 某一步后若x&lt;=0或y&gt;n，程序终止
2. x+=ax, y+=ax
3. x-=ax, y+=ax
4. 交替执行步骤2和3，或许有限步后结束，或许永远不会终止
</code></pre>

<p>现在给定序列{a[2..n]}，接下来将这个程序跑n-1遍，第i遍执行序列i, a2, …, an，若程序终止，输出y的值，否则输出-1</p>

<p><em>注意2和3中的ax，其中是以x是变量，是数组下标。比赛时没仔细看直接以为按顺序执行ai，做了很多无用功。略怨念</em></p>

<p>可以看到共有n*2个状态，2代表当前操作是2还是3，可以直接记忆化搜索。我写的比较麻烦，用了map&lt;int, vector&lt;int&gt; &gt;来表示图，比如mp[a+ax] = x。</p>

<h2 id="c-coin-troubleshttpwwwcodeforcescomcontest283problemc"><a href="http://www.codeforces.com/contest/283/problem/C">C. Coin Troubles</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/C.cpp">source code</a></p>

<p>给定n种硬币，面值总共为t，然后有q种限制(bi, ci)，表示类型bi的硬币比ci多，现在要求有多少种方案。其中bi各不相同，ci各不相同。</p>

<p>对于每种限制(bi,ci)，从bi到ci连一条有向边，所谓bi各不相同就是同一个点不能有1条以上出边，ci各不相同即一个点不能有1条以上入边，于是只能够构成一条链，也有可能是圈，然而这是不合法的，直接输出0即可。找到链后，比如是x1,x2,…,xk，于是可以做新的硬币，Si=x1+…+xi，就可以处理，xi一定要比xj多的要求(i&gt;j)，找方案数的话做一遍背包就可以了。其实细节还是挺多的，具体可以看代码。</p>

<h2 id="d-cows-and-cool-sequenceshttpwwwcodeforcescomcontest283problemd"><a href="http://www.codeforces.com/contest/283/problem/D">D. Cows and Cool Sequences</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/D.cpp">source code</a></p>

<p>定义cool pair (x,y)是x能够用y个连续整数的和表示，cool sequence{an}是对所有(ai,a{i+1})是cool pair。想在给定一个数列，要求改动最少的数使其是cool sequence。还是直接看<a href="http://www.codeforces.com/blog/entry/7036">官方报告</a>吧，基于一个发现然后n^2dp。</p>

<h2 id="e-cow-tennis-tournamenthttpwwwcodeforcescomcontest283probleme"><a href="http://www.codeforces.com/contest/283/problem/E">E. Cow Tennis Tournament</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/E.cpp">source code</a></p>

<p>数列{sn}表示一些cow的等级，cow_i能够打败cow_j当且仅当s_i&gt;s_j，现在有一些操作[a,b]，等级在在区间[a,b]里的cow的胜负关系会发生改变。最后问查询无序数对(p,q,r)有多少，其中存在一个排列使得cow_p-&gt;cow_q-&gt;cow_r-&gt;cow_p，i-&gt;j表是cow_i可以击败cow_j。</p>

<p>首先最后答案为C(m,3)-sigma(C(win_i,2))。用c[n][n]表示胜负关系是否被改变，那么当一次查询[a,b]时，矩形[a,b]x[a,b]里的关系将被反转，用垂直扫描线，线段树就可以解决。具体还是看<a href="http://www.codeforces.com/blog/entry/7036">官方报告</a>吧。</p>

<h2 id="summary">Summary</h2>

<p>A，B，C都是可以做的，但是比赛的时候只搞出了A，B和C在赛后很快fix了，很不扎实啊(&gt;_&lt;)。D和E只能通过看官方报告来获取想法，希望能一点一点提高吧。总之这是一套很不错的题目。以上。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #170 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/03/01/codeforces-round-number-170-div-1/"/>
    <updated>2013-03-01T15:16:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/03/01/codeforces-round-number-170-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-learning-languageshttpwwwcodeforcescomcontest277problema"><a href="http://www.codeforces.com/contest/277/problem/A">A. Learning Languages</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/A.cpp">source code</a></p>

<p>n个员工，m种语言，每个员工可以说0种或某些语言，语言相同的员工可以直接沟通，员工也可以间接沟通，即有员工帮他们翻译即可，于是只要是通过语言构成的联通块种任意两个人都可以沟通。问最少还要某些员工学几种语言可以达到员工两两可以沟通。</p>

<p>首先通过dfs或并查集找出所有联通块，可以发现每个联通块所会的语言是不同的，否则他们就联通了，现在只要将所有联通块连起来就可以了，可以看出需要再学联通块个数-1种语言就好了。每个人都不会任何语言的情况要特殊处理下。</p>

<h2 id="b-set-of-pointshttpwwwcodeforcescomcontest277problemb"><a href="http://www.codeforces.com/contest/277/problem/B">B. Set of Points</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/B.cpp">source code</a></p>

<p>一个平面点集的convexity是指最大的能构成凸多边形的子集元素个数。问n个点，convexity为m是否可行，可行的话输出任意一组可行解，要求任意三点不共线，点为整点。否则输出-1。(m&lt;=n&lt;=2m)</p>

<p>构造性算法。说到凸多边形，很容易联想到圆的内接多边形，在加上n&lt;=2m的限制，便想到两个同心多边形。至于不能的情况，便是m=3，n&gt;=5了。</p>

<h2 id="c-gamehttpwwwcodeforcescomcontest277problemc"><a href="http://www.codeforces.com/contest/277/problem/C">C. Game</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/C.cpp">source code</a></p>

<p>有一张方格纸，两个人可以轮流用剪刀沿着纵横方向剪，每次不必剪透，可以只剪一部分，但是不能不剪，剪完后的纸张还是在原位。当方格纸变为一个一个单位正方形时游戏就结束了，剪最后一刀的人获胜。现在给出一个已经经过剪裁的纸张，判断先手还是后手赢，若先手赢给出先手的第一步。</p>

<p>类似<a href="http://en.wikipedia.org/wiki/Nim">NIM</a>。由于行列是分离的，所以经过分离后会形成m-1+n-1个堆，和NIM对应起来。比较复杂的是处理出这些堆，处理完后直接用NIM的结果就可以了。</p>

<h2 id="d-google-code-jamhttpwwwcodeforcescomcontest277problemd"><a href="http://www.codeforces.com/contest/277/problem/D">D. Google Code Jam</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/D.cpp">source code</a></p>

<p>模拟codejam，找出最优解题顺序。注意罚时是最后一个正确的提交对应的时间，另外注意精度问题。具体可看<a href="http://www.codeforces.com/blog/entry/6815">这个</a></p>

<h2 id="e-binary-tree-on-planehttpwwwcodeforcescomcontest277probleme"><a href="http://www.codeforces.com/contest/277/problem/E">E. Binary Tree on Plane</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/E.cpp">source code</a></p>

<p>平面上有一些点，现在要连一些边，使这些点构成一个有向二叉树，并且线段总和最小。要求一个点的父亲的纵座标要严格大于当前点的纵座标。方案不存在的话输出-1。</p>

<p>最小费用最大流，由纵座标小的向纵座标大的连边，由于有二叉的限制，所以拆分点，使入度最大为2。具体可看代码。</p>
]]></content>
  </entry>
  
</feed>
