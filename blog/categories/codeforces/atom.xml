<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | Try To Think]]></title>
  <link href="http://delta4d.github.com/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://delta4d.github.com/"/>
  <updated>2013-03-23T21:25:30+08:00</updated>
  <id>http://delta4d.github.com/</id>
  <author>
    <name><![CDATA[delta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #174 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/03/18/codeforces-round-number-174-div-1/"/>
    <updated>2013-03-18T21:00:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/03/18/codeforces-round-number-174-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-cows-and-sequencehttpwwwcodeforcescomcontest283problema"><a href="http://www.codeforces.com/contest/283/problem/A">A. Cows and Sequence</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/A.cpp">source code</a></p>

<p>对于一个数列，有三个操作：</p>

<pre><code>1. 给a个数同时加x
2. 在末尾加入元素k
3. 去掉末尾的元素
</code></pre>

<p>对于每一次操作，查询数列的平均值，共有2*10^5次操作。三个操作都可以看作区间操作，[1,a]上同时加x，[sz,sz+1]加x，[sz-1,sz]减去数列末尾sz处的值，于是可以用树状数组来做。 </p>

<h2 id="b-cow-programhttpwwwcodeforcescomcontest283problemb"><a href="http://www.codeforces.com/contest/283/problem/B">B. Cow Program</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/B.cpp">source code</a></p>

<p>初始时给定两个数x=1，y=0，还有一个序列{an}，在这个基础上有一些列操作</p>

<pre><code>1. 某一步后若x&lt;=0或y&gt;n，程序终止
2. x+=ax, y+=ax
3. x-=ax, y+=ax
4. 交替执行步骤2和3，或许有限步后结束，或许永远不会终止
</code></pre>

<p>现在给定序列{a[2..n]}，接下来将这个程序跑n-1遍，第i遍执行序列i, a2, …, an，若程序终止，输出y的值，否则输出-1</p>

<p><em>注意2和3中的ax，其中是以x是变量，是数组下标。比赛时没仔细看直接以为按顺序执行ai，做了很多无用功。略怨念</em></p>

<p>可以看到共有n*2个状态，2代表当前操作是2还是3，可以直接记忆化搜索。我写的比较麻烦，用了map&lt;int, vector&lt;int&gt; &gt;来表示图，比如mp[a+ax] = x。</p>

<h2 id="c-coin-troubleshttpwwwcodeforcescomcontest283problemc"><a href="http://www.codeforces.com/contest/283/problem/C">C. Coin Troubles</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/C.cpp">source code</a></p>

<p>给定n种硬币，面值总共为t，然后有q种限制(bi, ci)，表示类型bi的硬币比ci多，现在要求有多少种方案。其中bi各不相同，ci各不相同。</p>

<p>对于每种限制(bi,ci)，从bi到ci连一条有向边，所谓bi各不相同就是同一个点不能有1条以上出边，ci各不相同即一个点不能有1条以上入边，于是只能够构成一条链，也有可能是圈，然而这是不合法的，直接输出0即可。找到链后，比如是x1,x2,…,xk，于是可以做新的硬币，Si=x1+…+xi，就可以处理，xi一定要比xj多的要求(i&gt;j)，找方案数的话做一遍背包就可以了。其实细节还是挺多的，具体可以看代码。</p>

<h2 id="d-cows-and-cool-sequenceshttpwwwcodeforcescomcontest283problemd"><a href="http://www.codeforces.com/contest/283/problem/D">D. Cows and Cool Sequences</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/D.cpp">source code</a></p>

<p>定义cool pair (x,y)是x能够用y个连续整数的和表示，cool sequence{an}是对所有(ai,a{i+1})是cool pair。想在给定一个数列，要求改动最少的数使其是cool sequence。还是直接看<a href="http://www.codeforces.com/blog/entry/7036">官方报告</a>吧，基于一个发现然后n^2dp。</p>

<h2 id="e-cow-tennis-tournamenthttpwwwcodeforcescomcontest283probleme"><a href="http://www.codeforces.com/contest/283/problem/E">E. Cow Tennis Tournament</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/174/1/E.cpp">source code</a></p>

<p>数列{sn}表示一些cow的等级，cow_i能够打败cow_j当且仅当s_i&gt;s_j，现在有一些操作[a,b]，等级在在区间[a,b]里的cow的胜负关系会发生改变。最后问查询无序数对(p,q,r)有多少，其中存在一个排列使得cow_p-&gt;cow_q-&gt;cow_r-&gt;cow_p，i-&gt;j表是cow_i可以击败cow_j。</p>

<p>首先最后答案为C(m,3)-sigma(C(win_i,2))。用c[n][n]表示胜负关系是否被改变，那么当一次查询[a,b]时，矩形[a,b]x[a,b]里的关系将被反转，用垂直扫描线，线段树就可以解决。具体还是看<a href="http://www.codeforces.com/blog/entry/7036">官方报告</a>吧。</p>

<h2 id="summary">Summary</h2>

<p>A，B，C都是可以做的，但是比赛的时候只搞出了A，B和C在赛后很快fix了，很不扎实啊(&gt;_&lt;)。D和E只能通过看官方报告来获取想法，希望能一点一点提高吧。总之这是一套很不错的题目。以上。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #170 (Div. 1)]]></title>
    <link href="http://delta4d.github.com/blog/2013/03/01/codeforces-round-number-170-div-1/"/>
    <updated>2013-03-01T15:16:00+08:00</updated>
    <id>http://delta4d.github.com/blog/2013/03/01/codeforces-round-number-170-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-learning-languageshttpwwwcodeforcescomcontest277problema"><a href="http://www.codeforces.com/contest/277/problem/A">A. Learning Languages</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/A.cpp">source code</a></p>

<p>n个员工，m种语言，每个员工可以说0种或某些语言，语言相同的员工可以直接沟通，员工也可以间接沟通，即有员工帮他们翻译即可，于是只要是通过语言构成的联通块种任意两个人都可以沟通。问最少还要某些员工学几种语言可以达到员工两两可以沟通。</p>

<p>首先通过dfs或并查集找出所有联通块，可以发现每个联通块所会的语言是不同的，否则他们就联通了，现在只要将所有联通块连起来就可以了，可以看出需要再学联通块个数-1种语言就好了。每个人都不会任何语言的情况要特殊处理下。</p>

<h2 id="b-set-of-pointshttpwwwcodeforcescomcontest277problemb"><a href="http://www.codeforces.com/contest/277/problem/B">B. Set of Points</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/B.cpp">source code</a></p>

<p>一个平面点集的convexity是指最大的能构成凸多边形的子集元素个数。问n个点，convexity为m是否可行，可行的话输出任意一组可行解，要求任意三点不共线，点为整点。否则输出-1。(m&lt;=n&lt;=2m)</p>

<p>构造性算法。说到凸多边形，很容易联想到圆的内接多边形，在加上n&lt;=2m的限制，便想到两个同心多边形。至于不能的情况，便是m=3，n&gt;=5了。</p>

<h2 id="c-gamehttpwwwcodeforcescomcontest277problemc"><a href="http://www.codeforces.com/contest/277/problem/C">C. Game</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/C.cpp">source code</a></p>

<p>有一张方格纸，两个人可以轮流用剪刀沿着纵横方向剪，每次不必剪透，可以只剪一部分，但是不能不剪，剪完后的纸张还是在原位。当方格纸变为一个一个单位正方形时游戏就结束了，剪最后一刀的人获胜。现在给出一个已经经过剪裁的纸张，判断先手还是后手赢，若先手赢给出先手的第一步。</p>

<p>类似<a href="http://en.wikipedia.org/wiki/Nim">NIM</a>。由于行列是分离的，所以经过分离后会形成m-1+n-1个堆，和NIM对应起来。比较复杂的是处理出这些堆，处理完后直接用NIM的结果就可以了。</p>

<h2 id="d-google-code-jamhttpwwwcodeforcescomcontest277problemd"><a href="http://www.codeforces.com/contest/277/problem/D">D. Google Code Jam</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/D.cpp">source code</a></p>

<p>模拟codejam，找出最优解题顺序。注意罚时是最后一个正确的提交对应的时间，另外注意精度问题。具体可看<a href="http://www.codeforces.com/blog/entry/6815">这个</a></p>

<h2 id="e-binary-tree-on-planehttpwwwcodeforcescomcontest277probleme"><a href="http://www.codeforces.com/contest/277/problem/E">E. Binary Tree on Plane</a></h2>
<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/170/1/E.cpp">source code</a></p>

<p>平面上有一些点，现在要连一些边，使这些点构成一个有向二叉树，并且线段总和最小。要求一个点的父亲的纵座标要严格大于当前点的纵座标。方案不存在的话输出-1。</p>

<p>最小费用最大流，由纵座标小的向纵座标大的连边，由于有二叉的限制，所以拆分点，使入度最大为2。具体可看代码。</p>
]]></content>
  </entry>
  
</feed>
