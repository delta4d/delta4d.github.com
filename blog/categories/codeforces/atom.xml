<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeforces | Try To Think]]></title>
  <link href="http://delta4d.github.io/blog/categories/codeforces/atom.xml" rel="self"/>
  <link href="http://delta4d.github.io/"/>
  <updated>2013-10-31T18:05:30+08:00</updated>
  <id>http://delta4d.github.io/</id>
  <author>
    <name><![CDATA[delta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #190 (Div. 1)]]></title>
    <link href="http://delta4d.github.io/blog/2013/06/29/codeforces-round-number-190-div-1/"/>
    <updated>2013-06-29T22:02:00+08:00</updated>
    <id>http://delta4d.github.io/blog/2013/06/29/codeforces-round-number-190-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-ciel-and-robothttpcodeforcescomcontest321problema"><a href="http://codeforces.com/contest/321/problem/A">A. Ciel and Robot</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/190/1/A.cpp">source code</a></p>

<p>有一个bot位于xoy平面原点，给定一个移动序列s包含’UDLR’，分别表示向上，下，左和右各移动一个单位，该指令序列s可以重复执行任意此，现在给定坐标(a,b)问是否可以经过有限次指令后到达。</p>

<p>设置行到s(i)后bot坐标为(xi,yi)，执行完s后的坐标为(sx,sy)，则若能够到达(a,b)则存在非负整数k和i使得a=xi+ksx,b=yi+ksy。枚举i就可以了，算法看起来虽然比较简单，但实际写起来还是有很多需要注意的地方。</p>

<h2 id="b-ciel-and-duelhttpcodeforcescomcontest321problemb"><a href="http://codeforces.com/contest/321/problem/B">B. Ciel and Duel</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/190/1/B.cpp">source code</a></p>

<p>Ciel和Jiro玩这样一个牌类游戏，Jiro有n张牌，每张有两个属性：position(Attack或Defense)，strength，Ciel有m张牌，现在轮到Ciel进攻，他可以重复置行以下操作：</p>

<pre><code>1. 选择自己的一张牌X，这张牌之前没有用过
2. 如果Jiro没有手牌，那么他被伤害X
3. 否则由Ciel选择Jiro的一张手牌Y：
   * Y的position为Attack，那么必须有(X's strength) &gt;= (Y's strength)，Jiro获得伤害(X's strength)-(Y's strength)，手牌Y不可以再用
   * Y的position为Defense，那么必须有(X's strength) &gt; (Y's strength)，Jiro没有伤害，手牌Y不可以再用
</code></pre>

<p>现在求Jiro能够受到的最大伤害是多少</p>

<p>如果Ciel没有将Jiro的手牌拿完，那么可以看到选择Def牌是不会增加伤害的，于是只需要考虑Atk，于是采用贪心，枚举Ciel可以将自己最大的多少张牌打完。</p>

<p>如果Ciel将Jiro的手牌取完，要使结果最大，那么用刚好大于Def的牌去对付Def就可以了，然后看是否可以取完Atk牌。更多的解法，可以官方<a href="http://codeforces.com/blog/entry/8192">editorial</a></p>

<h2 id="c-ciel-the-commanderhttpcodeforcescomcontest321problemc"><a href="http://codeforces.com/contest/321/problem/C">C. Ciel the Commander</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/190/1/C.cpp">source code</a></p>

<p>有一棵树，给每个点赋一个等级(A-Z)，若两个点等级相同，那么连接这两个点的路径里至少有一个点的等级大于两个端点。问是否存在这样的赋值方案。</p>

<p>假若最大规模，有一个10^5的链，那么可以看到先对中点x赋值A，那么左右分为两棵子树，如果这两个树中有相同的等级，那么必须通过x，于是只需让两棵子树的最大等级为B就可以了，然后依次找子树的中点，递归的做下去，可知log2(10^5)&lt;26，于是方案是存在的。</p>

<p>现在需要拓展线段的中点到树的中点（重心），重心即使得他的最大子树的大小最小，具体可以看<a href="http://acm.sgu.ru/problem.php?contest=0&amp;problem=134">sgu134</a>和Google。</p>

<h2 id="d-ciel-and-flipboardhttpcodeforcescomcontest321problemd"><a href="http://codeforces.com/contest/321/problem/D">D. Ciel and Flipboard</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/190/1/D.cpp">source code</a></p>

<p>有一个nxn的方阵，n为不大于33的奇数，有这样一个操作，取m=(n+1)/2，在nxn的方阵中取一个mxm的子方阵，其中的数全部取其相反数，现在问通过这种操作方阵中所有数的和的最大值是多少？</p>

<p>共有mxm个子方阵，即共有m^2种操作，由于重复同一种操作是没有效果的，于是每种操作只会做0次或1次，共有2^(m^2)种结果，不同的操作序列产生不同的结果。</p>

<p>假若一个方格最后改变了符号那么赋值1，否则0，即这个赋值方阵为s，那么操作中蕴含有这样的等式：</p>

<pre><code>s[i][j] ^ s[i][m] ^ s[i][j+m] = 0    1 &lt;= j &lt; m
s[i][j] ^ s[m][j] ^ s[i+m][j] = 0    1 &lt;= i &lt; m
</code></pre>

<p>这是因为(i,j)(i,m)(i,j+m)同一操作中要么有0个要么有2个被选中，于是只需要左上角mxm的方阵就可以决定nxn的方阵。并且给出左上角方阵的一个布局那么肯定有一个操作序列与其对应，这是因为左上角mxm的方阵恰好有2^(m^2)种布局，于是刚好和操作序列产生的布局一一对应。</p>

<p>于是现在可以枚举第m列的情况，然后决定第m行的情况，接下来贪心就可以了。</p>

<h2 id="e-ciel-and-gondolashttpcodeforcescomcontest321probleme"><a href="http://codeforces.com/contest/321/problem/E">E. Ciel and Gondolas</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/190/1/E.cpp">source code</a></p>

<p>有n个人，现在要对这n个人分组，每组的人编号都是连续的，每两个之间有一个不熟悉的值，一个组的不熟悉值为组内两两不熟悉值的总和，现在求所有分组中不熟悉值最小是多少，其中n&lt;=4000，最大的分组数k为800。</p>

<p>dp，设f(i,j)表示前i个人分为j组的最小不熟悉值总和，则</p>

<pre><code>f(i, j) = min(f(k, j-1) + unfamilliar(k+1..i))
unfamilliar(a, b) = u(a, a+1) + u(a, a+2) + ... + u(a, b) + u(a+1, a+2) + ... + u(b-1, b)
</code></pre>

<p>给定u则unfamilliar同样采用dp可以在n^2时间内求得，f转移方程复杂度为n，f状态共有nk，则复杂度共kn^2，需要对dp进行优化。</p>

<p>优化的地方缩小k的范围，设t(i,j)=min{k|f(i,j)=f(k,j-1)+unfamilliar(k+1..i)}，则有t(i,j-1)&lt;=t(i,j)&lt;=t(i+1,j)。</p>

<h2 id="summary">Summary</h2>

<p>A写的比较仔细，1y。然后就一直再搞B，感觉匹配棵搞，网络流也可搞，但就是搞不出来，感觉可以贪心，但又没有一个仔细的贪心策略，感觉脑子轻飘飘的，不会思考一样，最后虽然过了pretest，但挂了finaltest，中间有想过C，其实算法自己想的是对的，但是复杂度估计错了，就没有再搞，这个已经不是第一次了，现在感觉复杂度的估算是一个比较严重的问题了，会影响对于算法的思考，严重不扎实啊。啊啊啊，弱爆了弱爆了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #187 (Div. 1)]]></title>
    <link href="http://delta4d.github.io/blog/2013/06/08/codeforces-round-number-187-div-1/"/>
    <updated>2013-06-08T13:23:00+08:00</updated>
    <id>http://delta4d.github.io/blog/2013/06/08/codeforces-round-number-187-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-sereja-and-contesthttpcodeforcescomcontest314problema"><a href="http://codeforces.com/contest/314/problem/A">A. Sereja and Contest</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/187/1/A.cpp">source code</a></p>

<p>有一列数{an}，定义<script type="math/tex">d_i=\sum_{j=1}^{i-1}(a_j(j-1)-(n-i)a_i)</script>，现在要求去掉一些ai使得去掉后得到的子列对应的d每一项都不小于给定的k。</p>

<p>直接模拟就可以了，遇到di&lt;k时，去掉此时的ai，注意去掉i后对于i之前的没有影响，计算这个ai对于之后dj的影响，然后继续扫描就可以了。计算影响时，假设已经去掉了ai1,ai2..,然后按照di的计算公式计算出差值就可以了。</p>

<h2 id="b-sereja-and-periodshttpcodeforcescomcontest314problemb"><a href="http://codeforces.com/contest/314/problem/B">B. Sereja and Periods</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/187/1/B.cpp">source code</a></p>

<p>定义字符串s的数乘ns为n个s相连，现在给定ba，dc，其中a，c为字符串，求ba的子串最多包含多少个dc。</p>

<p>贪心，考虑当从a[0],c[i]开始匹配，将a匹配完后下一个匹配到的c的位置和总共匹配的字符长度是多少，然后扫描一遍就可以了。</p>

<h2 id="c-sereja-and-subsequenceshttpcodeforcescomcontest314problemc"><a href="http://codeforces.com/contest/314/problem/C">C. Sereja and Subsequences</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/187/1/C.cpp">source code</a></p>

<p>给定数列{an}，对于a的所有<strong>不同的</strong>非递减子列{b}，计算sum(product(bi))。</p>

<p>动态规划，用p[i]表示以i结尾的子列的积之和，那么p[j]=j*sum(p[i], i&lt;=j)+j，表示排在i后面和j单独构成一个子列的情况。由于要计算所有不同的子列，所以当i=j时会有重复，此时要减掉以前的p[j]。</p>

<p>比如1，2，2</p>

<pre><code>1. p[1] = 1
2. p[2] = 2 * p[1] + 2 = 4
3. p[2] = 2 * (p[2] + p[1]) + 2 = 12, 此时有重复所以要减去旧的p[2]=4，即最后结果为12-4=8
</code></pre>

<p>将以上三步的结果加起来最后结果为1+4+8=13</p>

<h2 id="d-sereja-and-straight-lineshttpcodeforcescomcontest314problemd"><a href="http://codeforces.com/contest/314/problem/D">D. Sereja and Straight Lines</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/187/1/D.cpp">source code</a></p>

<p>二维平面上有一堆点，定义点之间的距离为曼哈顿距离，现在画两条正交的直线，其中一条与x轴夹角为45度，现在找出所有点到两条直线的距离较小值里的最大值，现在要求最小化最大值。</p>

<p>因为两条直线斜率为1和-1，根据距离的定义，点到直线的距离便为该点到直线的横向或纵向的距离。设两条直线为y=x+a,y=-x+b，则d(xi,yi)=min(|yi-xi-a|,|yi+xi-b|)，目标为min(max(d(xi,yi)))，假设对于某种直线的放置d=max(d(xi,yi))，则对于所有i要么有|yi-xi-a|&lt;=d要么|yi+xi-b|&lt;=d，于是我们可以枚举d，将所有(xi,yi)变为(xi’,yi’)=(xi+yi,yi-xi)，则|xi’-b|&lt;=d,|yi’-a|&lt;=d，问题变为用两条分别与纵横轴平行的相同宽度2d的带状区域是否可以覆盖所有点。可以看到宽度具有单调性，于是可以二分解决。首先按x来看一条宽为2d的带来看可以包含多少点，找出没有被包含的点y最大值和最小值，如果它们之差不大于2d，那么说明d符合条件。</p>

<h2 id="e-sereja-and-squareshttpcodeforcescomcontest314probleme"><a href="http://codeforces.com/contest/314/problem/E">E. Sereja and Squares</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/187/1/E.cpp">source code</a></p>

<p>去掉背景，用(lowercase,uppercase)表示括号的左和右，除去Sereja不喜欢的x总共有25个括号，现在给定一个序列，都是左括号或问号表示未知，现在对问号赋值问总共有多少种合法的括号序列。</p>

<p>用f(i,j)表示前i个其中有j个开括号，转移方程为</p>

<pre><code>f(i, j) = f(i-1, j-1)                      s[i] = a lowercase
f(i, j) = 25f(i-1, j-1) + f(i-1, j+1)      s[i] = '?'
</code></pre>

<p>这是一个n^2的算法，题目给定n=10^5，需要做一些优化否则会超时，经过观察发现n^2个状态中其实只用到了n^2/8种，优化到这个地方就可以过了。更厉害的优化可以看看其他的提交。</p>

<h2 id="summary">Summary</h2>

<p>A被我搞的太复杂了，半个小时都没搞定，本不打算做这场比赛了，后来还是想着先把A写了，可以第二天早上交一下，写完A后，又看了下其他题目，感觉C可搞，写完过了sample，此时差不多过了70min，想了一下决定赌我的A和C都是对的，就交了，结果两个都是WA，T_T，后面的时间就一直在想C会出什么问题，最后20min发现漏看了非递减的条件，就说怎么会这么快就搞出来。。但是觉得算法是一致的于是就一直debug，但是直到比赛结束都没搞出来。早上又把A和C看了一下，A是漏减了一项导致WA，C仔细重写后也过了，最后都搞出来了也没什么可怨念的了。啊啊啊，弱爆了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #183 (Div. 1)]]></title>
    <link href="http://delta4d.github.io/blog/2013/05/13/codeforces-round-number-183-div-1/"/>
    <updated>2013-05-13T00:15:00+08:00</updated>
    <id>http://delta4d.github.io/blog/2013/05/13/codeforces-round-number-183-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-lucky-permutation-triplehttpwwwcodeforcescomcontest303problema"><a href="http://www.codeforces.com/contest/303/problem/A">A. Lucky Permutation Triple</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/183/1/A.cpp">source code</a></p>

<p>0到n-1有三个排列a,b,c，若a[i] + b[i] = c[i] (mod n)，则称(a,b,c)为lucky permutation triple，给定n，若方案存在输出任意一个，否则输出-1。</p>

<p>因为a[i] + b[i] = c[i] (mod n)则sigma(a[i]) + sigma(b[i]) = sigma(c[i]) (mod n)，即n*(n-1) = n*(n-1)/2 (mod n)，那么n*(n-1)/2 = 0 (mod n)，可知当n为偶数时使不可能的，所以n只能是奇数，我们有恰好可以构造出n为奇数时的方案：</p>

<pre><code>a	0	1	2	...n-2	n-1		
c	n-2	n-3	n-4	...0	n-1
b	calculate me! &amp; prove it is legal
</code></pre>

<h2 id="b-rectangle-puzzle-iihttpwwwcodeforcescomcontest303problemb"><a href="http://www.codeforces.com/contest/303/problem/B">B. Rectangle Puzzle II</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/183/1/B.cpp">source code</a></p>

<p>给矩形[0,n]x[0,m]，矩形内有一点P(x,y)，求一个<strong>面积最大的</strong>矩形[x1,x2]x[y1,y2]包含P且(x2-x1)/(y2-y1)=a/b。若有多解，则选择矩形中心距离P最近的，若还有多解则选择序列x1y1x2y2中字典序最小的。</p>

<p>构造。首先使(a,b)=1，则矩形边长为ak,bk，首先满足面积最大的要求则ak&lt;=n,bk&lt;=n，求出最大的k，这样矩形边长就确定了，然后就是怎么摆的问题了，即要满足距离最小的要求，尽量使长度为ak的线段中心往x靠就行了，在这个基础上尽量使x1,y1小就可以了。</p>

<h2 id="c-minimum-modularhttpwwwcodeforcescomcontest303problemc"><a href="http://www.codeforces.com/contest/303/problem/C">C. Minimum Modular</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/183/1/C.cpp">source code</a></p>

<p>给一个序列{ai}，找出最小的m使得ai关于m两两不同余，你可以在{ai}中去掉k(&lt;=4)个数以达到目的。</p>

<p>可知M=max{ai}+1满足要求，即m&lt;=M。若ai和aj关于m同余，则m|ai-aj，预处理出所有ai-aj，然后枚举m，看有多少ai-aj整除m，当数目大于k*(k+1)/2时，直接跳出接着测试下一个数。要使集合A={i|存在j属于A使得m|ai-aj}的数目尽量小但是造成m|ai-aj的影响尽可能大，那么只能是下面的情况x1,x2,…xk,x(k+1)，m|xi-x(i-1)，这样构成的(i,j)对共有1+2+…+k=k(k+1)/2。当通过这个测试时然后暴力检测m就可以了。</p>

<h2 id="d-rotatable-numberhttpwwwcodeforcescomcontest303problemd"><a href="http://www.codeforces.com/contest/303/problem/D">D. Rotatable Number</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/183/1/D.cpp">source code</a></p>

<p>给定数字长度n，和数制上限x找出最大的数制b&lt;x，使得存在一个长度为n的<a href="http://en.wikipedia.org/wiki/Cyclic_number">Cylic Number</a>。</p>

<p>cyclic number形式为(b^(p-1)-1)/p，p为素数,(b,p)=1，且b为模p的<a href="http://en.wikipedia.org/wiki/Primitive_root_modulo_n">原根</a>。那么首先n=p-1，即n+1要为素数，然后暴力枚举b直到b为一个模p的原根就可以了。</p>

<h2 id="e-random-rankinghttpwwwcodeforcescomcontest303probleme"><a href="http://www.codeforces.com/contest/303/problem/E">E. Random Ranking</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/183/1/E.cpp">source code</a></p>

<p>一场比赛选手i的比赛成绩均匀分布在[li,ri]区间，得分越低排名越高，求每个选手i排第j名的概率。</p>

<p>一开始我想预处理出每个选手i排在选手j前面的概率，然后对于每个选手i用p[n][m]表示前n个选手有m个排到i之前的概率，但是后来发现是不对的，因为{rank(x)&lt;i}和{rank(y)&lt;i}不是独立的，比如[0,2],[1,3],[2,4]若1排到2之后，则3肯定在2之后，为了处理这个问题，分区间来讨论。预处理出所有的相邻区间，即(a,b)内不存在其他分点li或ri，这样枚举第i个人处于第k个分数区间，p[n][m]表示当前有n个人的分数在这个区间之前，m个人的分数也在这个区间之内的概率，那么第i个人排到第j名的概率为p[n][m]/m，j&gt;=n+1。</p>

<h2 id="summary">Summary</h2>

<p>这场比赛时间很好，CST21:00。这场比赛基本上一直在搞B，一开始思考错方向，后来醒悟过来是构造，但是sample2过不了，看了好长时间还是觉得自己的解更优，后来问了judge才发现面积最大的条件漏掉了，改了之后又wa了三次，有一次还是代码复制的时候出错的，最后过pretest的时候已经只有100来分了。。写B最后太急了，至少后两次wa应该都是可以避免的，冷静啊冷静。后来20min就乱搞C，后来发现果然使乱搞，太急了，连同余最基本的等价条件都不能够想到。C和D虽然都会写，但是复杂度方面还是不太会搞啊，D直接从10^9暴搜啊，原根是怎么分布的啊。啊啊啊，数学弱爆了啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #182 (Div. 1)]]></title>
    <link href="http://delta4d.github.io/blog/2013/05/06/codeforces-round-number-182-div-1/"/>
    <updated>2013-05-06T13:19:00+08:00</updated>
    <id>http://delta4d.github.io/blog/2013/05/06/codeforces-round-number-182-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-yaroslav-and-sequencehttpwwwcodeforcescomcontest301problema"><a href="http://www.codeforces.com/contest/301/problem/A">A. Yaroslav and Sequence</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/182/1/A.cpp">source code</a></p>

<p>给定一个2n-1长度的数列，可以选取这个数列中的n个数然后取其相反数，这样的操作不限次数。问这个数列所有元素和最大可能是多少。</p>

<p>比如头两次选取重复的部分的长度为L，那么两次操作后改变符号的元素为2(n-L)个，若能使2(n-L)=n+1，那么接下来在做一次操作，便可以达到只改变一个元素的效果，此时L=(n-1)/2，只有当n为奇数的时候才有可能，当n为偶数时能够改变的最小元素个数为2，因为假若经过若干次变换达到了只改变一个元素的效果，考虑不变量，假设每操作一个元素那么加1，则操作k次后的和为kn。那么考虑只有一个元素改变的情况，其他元素被操作的次数为偶数，于是总的改变元素的次数为奇数，而kn为偶数，矛盾，所以若干次操作最少也会改变两个元素，且这个界是可以达到的，取L=n/2+1就可以了。</p>

<h2 id="b-yaroslav-and-timehttpwwwcodeforcescomcontest301problemb"><a href="http://www.codeforces.com/contest/301/problem/B">B. Yaroslav and Time</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/182/1/B.cpp">source code</a></p>

<p>从i到j需要消耗(|xi-xj|+|yi-yj|)*d单位的资源，i可以增加ai单位的资源，但是第二次到i的时候不会重复增加，期间可以购买资源，问从要从1到n最少需要购买多少资源。</p>

<p>由于经过i后不管去向哪里都会增加ai，于是将dis(i,j)可以看作ij曼哈顿距离乘以d减去ai，然后正常求最短路就可以了。</p>

<h2 id="c-yaroslav-and-algorithmhttpwwwcodeforcescomcontest301problemc"><a href="http://www.codeforces.com/contest/301/problem/C">C. Yaroslav and Algorithm</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/182/1/C.rb">source code</a></p>

<p>有这样一个算法A：</p>

<pre><code>1. A接受一个字符串a为输入
2. A包含了一些命令。命令i要么为si&gt;&gt;wi，或者si&lt;&gt;wi，si和wi是长度不大于7的字符串，包含数字和'?'
3. 每一次迭代过程中，A找到最小的一个索引i，使得si是a中的一个子串。若没有找到则算法结束
4. 用k表示每次迭代找到的命令，将a中si用wi代替，若为&gt;&gt;则继续迭代，若为&lt;&gt;则算法结束
5. 算法结束后的a作为A的输出
</code></pre>

<p>现在给定n（&lt;=100）个数字，要求每个数字经过算法A后都加一。要求输出一系列的命令构成算法A完成要求，其中对A有如下限制：</p>

<pre><code>1. 每一个命令都是合法的
2. 命令总数不能超过50
3. 算法会将每个输入的数字加一
4. 对于每个数字迭代次数不能超过200
</code></pre>

<p>很直接的想法就是对于每个输入x&lt;&gt;x+1，然而由于输入有100个，而命令不能超过50，所以这样是不可以的，于是需要想一个适用于所有数字的命令而不是针对特定数字的。</p>

<p>需要用’?’来完成要求，以123来举例，我们首先可以随便找一个数，比如找到了1，将1变为1?，则123-&gt;1?23，然后不断的将?后移变为123?，然后将3?变为4就可以了，比较麻烦的是需要进位的情况，这样就需要往前处理，比如99变为99?后我们可以将9?变为9??，此时99-&gt;99??，然后99??-&gt;9??0-&gt;??00-&gt;100。</p>

<h2 id="d-yaroslav-and-divisorshttpwwwcodeforcescomcontest301problemd"><a href="http://www.codeforces.com/contest/301/problem/D">D. Yaroslav and Divisors</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/182/1/D.cpp">source code</a></p>

<p>给定一个大小为n（&lt;=200000）的数组p，p为1-n的一个排列，然后有m（&lt;=200000）个查询l，r，问在p[l..r]中满足pi整数pj的数对ij有多少。</p>

<p>对于每个i在1-n中i的倍数为n/i个，则共有n/1+n/2+…+n/n=nln(n)个满足整除关系的点对，按数组索引预处理出这样的点对，比如对索引i，找出所有的j&lt;=i使得p[j]整除p[i]或p[i]整除p[j]。然后从p左侧开始扫描，引入计数数组c，当扫描到i时，对于区间[1,j]中的每个k，c[k]+=1，则对于查询[l,i]的结果即c[l]。</p>

<h2 id="e-yaroslav-and-arrangementshttpwwwcodeforcescomcontest301probleme"><a href="http://www.codeforces.com/contest/301/problem/E">E. Yaroslav and Arrangements</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/182/1/E.cpp">source code</a></p>

<p>定义good array {an}为：</p>

<pre><code>1. a1 = min{an}
2. |a1 - a2| = 1, |a2 - a3| = 1, ..., |a(n-1) - an| = 1, |an - a1| = 1
</code></pre>

<p>定义great array {br}为：</p>

<pre><code>1. b1 &lt;= b2 &lt;= ... &lt;= br
2. 1 &lt;= r &lt;= n, 1 &lt;= bi &lt;= m
3. {br}的所有排列中有t个good array，且 1 &lt;= t &lt;= k
</code></pre>

<p>给定n，m，k求{br}的个数</p>

<p>考虑下goodarray有什么性质。首先若{an}good，则{an-a1}good，所以我们可以固定最小元为0。设x=min{an},y=max{an}，那么y-x&lt;=n/2（利用这个可以降低这一维的长度），这是因为假若y太大，就不能构成环了，基于同样的原因，[x,y]之间的每个数在{an}中都必须出现，否则会出现断层。其次n为偶数，这是由于a1-an=(a1-a2)+(a2-a3)+(a(n-1)-an)，即a1-an为n-1个1或-1的和，即a1-an于n-1奇偶性相同，而a1-an为奇数，所以n为偶数，这样dp的时候这个维的长度可以减半，这个在具体推导转移方程的时候也可以看出来。最后考虑y的周围两个数，因为y最大，所以y的两侧只能是y-1，这样可以发现如下规律</p>

<pre><code>0 1 2 1 0 1 0 1 2 1 =&gt; 0 (1 2 1) 0 1 0 (1 2 1) =&gt; 0 1 0 1 0 1
</code></pre>

<p>即可以把(y-1 y y-1)看作y-1，则会构成一个最小值为x最大值为y-1且规模更小的good array，这样就可以适用动态规划了。我们逐个添加元素，需要记录当前处理的元素，当前array大小，当前元素选了多少个，所有排列中有多少great array。如果当前元素i有y个，可见至少需要i-1 x+y个，共有C(x+y-1,x)种选法，然后枚举当前元素选多少个更新就可以了。</p>

<h2 id="summary">Summary</h2>

<p>这场由于技术原因最后是unrated，momo作者。正准备写B的时候A被hack了，检查了半天最后发现数组开小了，改完之后就直接睡了，以后要多注意啊。C是一道很好玩的题目，E的dp也很好，最后还是要momo作者。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #180 (Div. 1)]]></title>
    <link href="http://delta4d.github.io/blog/2013/04/20/codeforces-round-number-180-div-1/"/>
    <updated>2013-04-20T17:56:00+08:00</updated>
    <id>http://delta4d.github.io/blog/2013/04/20/codeforces-round-number-180-div-1</id>
    <content type="html"><![CDATA[<h2 id="a-parity-gamehttpwwwcodeforcescomcontest297problema"><a href="http://www.codeforces.com/contest/297/problem/A">A. Parity Game</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/180/1/A.cpp">source code</a></p>

<p>有两个01串a和b，对于a有两种操作，a-&gt;a[1..-1]和a-&gt;a+parity(a)，问能否通过这两种操作使a变为b。</p>

<p>考察操作中的不变量，可以看到，a中1的个数是确定的，如果a中1的个数为偶数，那么两种操作均不会增加1，如果为奇数，那么1的个数之多智能增加1，对于parity操作0是可以随意添加的，于是只要a中最多能有的1的个数不比b少，那么a均可以变为b。</p>

<h2 id="b-fish-weighthttpwwwcodeforcescomcontest297problemb"><a href="http://www.codeforces.com/contest/297/problem/B">B. Fish Weight</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/180/1/B.cpp">source code</a></p>

<p>去掉背景，就是问对于给定的<script type="math/tex">\sum_{i=1}^{k}b_iw_i</script>和<script type="math/tex">\sum_{i=1}^{k}c_iw_i</script>，<script type="math/tex">% &lt;![CDATA[
0<w_1\le w_2\le ...\le w_n %]]&gt;</script>，能否有{wi}的一个分配方案使得使第一个式子严格大于第二个。</p>

<p>首先用第一个式子减第二个，令<script type="math/tex">a_i=b_i-c_i</script>，得到<script type="math/tex">X=\sum_{i=1}^{k}a_iw_i</script>，问X是否可以严格大于0。可以发现，如果an&gt;0，那么使wn趋于无穷大，总可以使X&gt;0，那么当an&lt;0时，我们肯定要使anwn造成的影响最小，那么要使wn最小，根据条件可以知道，wn最小为w[n-1]，于是w[n-1]系数变为a[n]+a[n-1]，规模化为n-1的原问题，如此一直向前，如果存在某个系数&gt;0，那么可知分配方案是存在的，否则无解。</p>

<h2 id="c-splitting-the-uniquenesshttpwwwcodeforcescomcontest297problemc"><a href="http://www.codeforces.com/contest/297/problem/C">C. Splitting the Uniqueness</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/180/1/C.cpp">source code</a></p>

<p>有一个数列{si}，对于每个si可以分解为si=ai+bi，于是由{si}可以生成两个数列{ai},{bi}。现在定义almost unique的数列为之多去掉ceil(n/3)项可以使数列项两两不同的数列，问是否存在si的一个分法，使得{ai}{bi}almost unique。其中si,ai,bi&gt;=0，且si两两不同。</p>

<p>不妨设s1&lt;s2&lt;…&lt;sn。假设一个数列{xn}中不同元素的个数为k，于是要使{x}unique，至少要去掉n-k个元素，于是almost unique的数列中不同元素的个数至少为n-ceil[n/3]。如果{si}分布很稀疏的话，比如s[i+1]-s[i]&gt;=2，那么只要让a[i]=i,b[i]=s[i]-i就可以了，因为s[i]各不相等，所以b[i+1]&gt;[i]，于是只要集中精力考虑{si}很密集的情况就可以了，比如{si}={1,2,…,n}。可以有以下的分法：</p>

<pre><code>s: 1 2 3 4 5 6 7 8 9	1 2 3 4 5 6 7 8 9
a: 1 2 3 0 0 0 4 5 6 	1 0 3 1 4 2 5 3 6
b: 0 0 0 4 5 6 1 2 3	0 2 0 3 1 4 2 5 3
</code></pre>

<p>两种分法都是可以的。</p>

<h2 id="d-color-the-carpethttpwwwcodeforcescomcontest297problemd"><a href="http://www.codeforces.com/contest/297/problem/D">D. Color the Carpet</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/180/1/D.cpp">source code</a></p>

<p>给一个h*w的方格，然后用k种颜色给这个方格染色，给出相邻单元格颜色之间的关系(相同和不相同)，问是否存在一个染色方案使得至少满足3/4的颜色关系。</p>

<p>首先共有T=w(h-1)+h(w-1)个约束关系。假若k=1，那么只有一种染色方案，直接判断就可以了，如果k&gt;1，接下来说明这种方案总是存在的。只需构造出k=2的方案。首先将第一行染色，满足第一行的行关系，然后染第二行，使得满足第二行的行关系，现在比较第一行和第二行之间不满足的列关系个数，记为c，如果c&lt;=w/2，那么继续，否则交换第二行的两种颜色，可知第二行的行关系依然满足，但是列关系不满足的个数变为w-c&lt;=w/2，如此继续直到最后一行。那么不满足的关系至多为S=w/2*(h-1)，如果h&gt;=w，则可知S/T&lt;=1/4，如果h&lt;w，那么先染列就可以了。</p>

<h2 id="e-mystic-carvingshttpwwwcodeforcescomcontest297probleme"><a href="http://www.codeforces.com/contest/297/problem/E">E. Mystic Carvings</a></h2>

<p><a href="https://github.com/delta4d/AlgoSolution/blob/master/codeforces/180/1/E.cpp">source code</a></p>

<p>略去题目背景，最后问题转化为要高效查询一个区间内有多少个完整区间，并且区间是在环上的。</p>

<p>首先考虑一条直线的情形，假设区间集合为{ai,bi}，按bi递增排序，那么当处理到第k个区间[ak,bk]时，前面的所有区间[ai,bi]都会有bi&lt;bk，于是只需查询有多少ai&gt;ak，可以用树状数组或线段树来记录ai，每处理完一个区间后在ai处加1就可以了。</p>

<p>然后考虑环的情况，将整个大区间扩成两倍长即可，于是以前的区间[a,b]可以变为[b,a+n],[a+n,b+n]，可以看到对于两个区间[a,b]和[x,y]，[x,y]只能包含于[a,b]和[b,a+n]中的一个，于是环的情况也解决了。</p>

<p>题目具体的分解转化可以看官方<a href="http://www.codeforces.com/blog/entry/7440">Tutorial</a>。</p>

<h2 id="summary">Summary</h2>

<p>A完全考虑错了方向，但是居然过了pretest，pretest也太弱了，B比较顺利，C比较侥幸。这应该是典型的需要”Do More Thinking Than Coding”的比赛，差不多都需要去充分挖掘题目条件给特定问题带来哪些特点和便利，观察啊观察，从反面考虑啊，神奇的构造啊，啊啊啊，弱爆了弱爆了。</p>
]]></content>
  </entry>
  
</feed>
